{"version":3,"sources":["./projects/demo/src/app/user/messages/messages.component.ts","./projects/demo/src/app/user/messages/messages.component.html","./projects/demo/src/app/user/messages/message.service.ts","./projects/demo/src/app/user/messages/edit-message/edit-message.component.ts","./projects/demo/src/app/user/messages/edit-message/edit-message.component.html","./projects/demo/src/app/user/messages/messages-routing.module.ts","./projects/demo/src/app/user/messages/message.resolver.ts","./projects/demo/src/app/user/messages/route-message.directive.ts","./projects/demo/src/app/user/messages/message/message.component.ts","./projects/demo/src/app/user/messages/message/message.component.html","./projects/demo/src/app/user/messages/messages.module.ts"],"names":[],"mappings":"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","file":"messages-messages-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { MessageService } from './message.service';\nimport * as Gun from 'gun';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.scss'],\n})\nexport class MessagesComponent implements OnInit {\n  inbox = this.messageService.messages.reduce();\n\n  constructor(\n    private userService: UserService,\n    private messageService: MessageService\n  ) {}\n\n  ngOnInit() {}\n\n  onMessageClick() {\n    this.messageService.messages.set({\n      text: 'hello',\n    });\n  }\n\n  onMessageRemove(message: any) {\n    if (Gun.node.is(message)) {\n      console.log('removing message', message);\n      this.messageService.messages\n        .get(message as never)\n        .once()\n        .subscribe((togo: any) => {\n          console.log('found removed message', togo);\n        });\n    }\n    this.messageService.messages\n      .unset(message)\n      .once()\n      .subscribe((r: any) => {\n        console.log('done removing message', r);\n      });\n  }\n\n  onMessageUpdate(message: any) {\n    console.log('updating', message);\n    this.messageService.messages\n      .get(Gun.node.soul(message) as any)\n      .put({ text: 'another update' })\n      .once()\n      .subscribe((m: any) => {\n        console.log('would update', m);\n      });\n    // this.messageService.messages.get(message).put({\n    //   text: 'updated',\n    // });\n  }\n}\n","<nav>\n  <h3>Messages</h3>\n  <button (click)=\"onMessageClick()\">New Message</button>\n</nav>\n<div id=\"Messages\" class=\"list\">\n  <ng-container *ngFor=\"let message of inbox|async\">\n    <ng-container *ngIf=\"message && message._\">\n      <input type=\"checkbox\">\n      <a [routerLink]=\"['/user/messages/', message | soul]\">{{message.text}}</a>\n      <!-- <div>{{message|updated|date:\"YYYY-MM-dd HH:mm:ss\"}}</div> -->\n      <div>\n        <button [routerLink]=\"['/user/messages/', message | soul, 'edit']\">Edit</button>\n        <button (click)=\"onMessageRemove(message)\">Remove</button>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\nimport { UserService } from '../user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages = this.userService.user.get('messages');\n  constructor(private userService: UserService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { MessageService } from '../message.service';\nimport { RouteMessageDirective } from '../route-message.directive';\nimport { NgGunService } from '../../../../../../ng-gun/src/lib/ng-gun.service';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { NgSeaService } from '../../../../../../ng-gun/src/lib/ng-sea.service';\nimport * as Gun from 'gun';\n@Component({\n  templateUrl: './edit-message.component.html',\n  styleUrls: ['./edit-message.component.scss'],\n})\nexport class EditMessageComponent\n  extends RouteMessageDirective\n  implements OnInit {\n  userSearch = this.fb.control(null);\n  user: any = null;\n  messageForm = this.fb.group({\n    text: [null, Validators.required],\n  });\n\n  constructor(\n    messageService: MessageService,\n    route: ActivatedRoute,\n    private ngGun: NgGunService,\n    private fb: FormBuilder,\n    private ngSea: NgSeaService\n  ) {\n    super(messageService, route);\n    this.message$.subscribe((m) => {\n      console.log('got message', m);\n      this.messageForm.patchValue(m, { onlySelf: true, emitEvent: false });\n    });\n    this.messageForm.valueChanges.subscribe((vc) => {\n      this.message$.pipe(take(1)).subscribe((m) => {\n        this.messageService.messages.get(m).put(vc);\n      });\n    });\n    this.userSearch.valueChanges.subscribe((alias) => {\n      this.user = null;\n      if (this.userSearch.invalid) {\n        return;\n      }\n      // console.log('should search for', alias);\n      this.ngGun.findAlias(alias).subscribe((found: any) => {\n        // console.log('found user', found);\n        if (!found) {\n          return;\n        }\n        const foundPub = Object.keys(found).find((k) => k !== '_');\n        this.user = {\n          alias,\n          pub: foundPub,\n        };\n      });\n    });\n  }\n  ngOnInit(): void {}\n\n  onSelectUser(event: MatAutocompleteSelectedEvent) {\n    const addPubKey = event.option.value;\n    console.log('selected', addPubKey);\n    this.ngGun\n      .user(addPubKey.replace(/^~/, ''))\n      .once()\n      .subscribe((user: any) => {\n        console.log('adding user', user.alias, user.pub);\n        const epub = user.epub;\n        const me = this.ngGun.auth().is.alias; // FIXME I think this will break when not recall()ing a session\n        console.log('I am', me);\n        const certificants = [user.pub];\n        const messageSoul = Gun.node.soul(this.message as any);\n        const policies = `^${messageSoul}*`;\n        const authority = me;\n        this.ngSea\n          .certify(certificants, policies, authority)\n          .subscribe((certificate) => {\n            console.log('generated certificate', certificate);\n            this.chain$.pipe(take(1)).subscribe((chain) => {\n              console.log('chain', chain);\n              // chain\n              //   .get('certificates' as never)\n              //   .get(user.pub)\n              //   .put(certificate as never);\n              // chain\n              //   .get('certificates' as never)\n              //   .once()\n              //   .subscribe((cs: any) => console.log('all certs', cs));\n            });\n          });\n      });\n    // this.message$.subscribe((mn) => {\n    //   console.log('updating', mn);\n    // // });\n    // this.messageService.messages.get()\n  }\n}\n","<form [formGroup]=\"messageForm\">\n  <textarea formControlName=\"text\"></textarea>\n</form>\n<form>\n  <mat-form-field>\n    <mat-label>Search for user</mat-label>\n    <input matInput [formControl]=\"userSearch\" [matAutocomplete]=\"auto\">\n  </mat-form-field>\n  <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onSelectUser($event)\">\n    <mat-option *ngIf=\"user\" [value]=\"user.alias\">{{user.alias}} {{user.pub}}</mat-option>\n  </mat-autocomplete>\n</form>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MessagesComponent } from './messages.component';\nimport { MessageComponent } from './message/message.component';\nimport { MessageResolver } from './message.resolver';\nimport { EditMessageComponent } from './edit-message/edit-message.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MessagesComponent,\n    children: [],\n  },\n  {\n    path: ':soul',\n    component: MessageComponent,\n    resolve: {\n      message: MessageResolver,\n    },\n  },\n  {\n    path: ':soul/edit',\n    component: EditMessageComponent,\n    resolve: {\n      message: MessageResolver,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MessagesRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Router,\n  Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { UserService } from '../user.service';\nimport { map, take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageResolver implements Resolve<any> {\n  constructor(private userService: UserService) {}\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<any> {\n    return this.userService.user\n      .get('messages')\n      .get(route.params.soul)\n      .once()\n      .pipe(map((message: any) => message._));\n  }\n}\n","import { Directive } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap, map, tap, shareReplay } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport { GunChain } from '../../../../../ng-gun/src/lib/classes/GunChain';\nimport { Message } from '../model';\n\n@Directive({\n  selector: '[appRouteMessage]',\n})\nexport class RouteMessageDirective {\n  chain!: GunChain;\n  message!: Message;\n  chain$ = this.route.data.pipe(\n    map((data) => this.messageService.messages.get(data.message)),\n    tap((chain: any) => (this.chain = chain)),\n    shareReplay(1)\n  );\n  message$: Observable<any> = this.chain$.pipe(\n    switchMap((chain) => chain.on()),\n    tap((message) => (this.message = message))\n  );\n  constructor(\n    protected messageService: MessageService,\n    private route: ActivatedRoute\n  ) {\n    // this.route.data.subscribe((d) => console.log('route data', d));\n    // this.message.subscribe((m) => console.log('got message', m));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { switchMap } from 'rxjs/operators';\nimport { MessageService } from '../message.service';\nimport { Observable } from 'rxjs';\nimport { RouteMessageDirective } from '../route-message.directive';\n\n@Component({\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n})\nexport class MessageComponent extends RouteMessageDirective implements OnInit {\n  ngOnInit(): void {}\n}\n","<h3>Message {{(message$|async)?._['#']}}</h3>\n<section>\n  {{(message$|async)?.text}}\n</section>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MessagesRoutingModule } from './messages-routing.module';\nimport { MessagesComponent } from './messages.component';\nimport { MessageComponent } from './message/message.component';\nimport { RouteMessageDirective } from './route-message.directive';\nimport { EditMessageComponent } from './edit-message/edit-message.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgGunModule } from '../../../../../ng-gun/src/lib/ng-gun.module';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\n@NgModule({\n  declarations: [\n    MessagesComponent,\n    MessageComponent,\n    RouteMessageDirective,\n    EditMessageComponent,\n  ],\n  imports: [\n    CommonModule,\n    MessagesRoutingModule,\n    ReactiveFormsModule,\n    NgGunModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n  ],\n})\nexport class MessagesModule {}\n"],"sourceRoot":"webpack:///"}