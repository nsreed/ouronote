{"version":3,"sources":["../../../projects/log/src/lib/log.service.ts","../../../projects/log/src/lib/log.component.ts","../../../projects/log/src/lib/log.module.ts"],"names":["LogLevel","LogService","name","parent","_this","this","_out$","EventEmitter","out$","outSub","subscribe","m","emit","console","log","Date","timestamp","toISOString","message","JSON","stringify","args","level","INFO","supplementals","Map","root","getLogger","prototype","verbose","_i","arguments","length","packed","buildMessage","VERBOSE","warn","WARN","error","ERROR","supplemental","has","supplementalLog","set","get","now","buffer$","pipe","scan","acc","val","push","shift","shareReplay","i0__namespace","ɵɵinject","factory","ɵfac","providedIn","Injectable","Optional","Inject","decorators","SkipSelf","LogComponent","ngOnInit","selectors","decls","vars","template","rf","ctx","i0","Component","selector","styles","LogModule","imports","NgModule","declarations","exports"],"mappings":"uoBASYA,SAAAA,EAAAA,cAAAA,GAAAA,EAAAA,EAAAA,WAAAA,EAAAA,SAAQ,KAClBA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,yBAeA,SAAAC,EAGSC,EAGAC,GANT,IAAAC,EAAAC,UAGS,IAAAH,IAAAA,EAAA,OAAAG,KAAAH,KAAAA,EAGAG,KAAAF,OAAAA,EAqBCE,KAAAC,MAAQ,IAAIC,EAAAA,aACtBF,KAAAG,KAAOH,KAAKC,MACZD,KAAAI,OAASJ,KAAKG,KAAKE,WAAU,SAACC,GACxBP,EAAKD,OACPC,EAAKD,OAAOG,MAAMM,KAAKD,GAEvBE,QAAQC,IACN,cACAH,EAAET,KACF,IAAIa,KAAKJ,EAAEK,WAAWC,cACtBN,EAAEO,QACFC,KAAKC,UAAUT,EAAEU,UAKvBhB,KAAAiB,MAAkBtB,EAAAA,SAASuB,KAEnBlB,KAAAmB,cAAgB,IAAIC,IArC1BpB,KAAKH,KAAOG,KAAKH,MAAQ,MACP,SAAdG,KAAKH,MAAoBC,IAC3BE,KAAKF,OAASF,EAAWyB,aAqCtBzB,EAAA0B,UAAP,SAAiBzB,GACf,OAAO,IAAID,EAAWC,IAGxBD,EAAA2B,UAAAC,QAAA,SAAQX,OAAiB,IAAAG,EAAA,GAAAS,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAT,EAAAS,EAAA,GAAAC,UAAAD,GACvB,IAAMG,EAAS5B,KAAK6B,aAAalC,EAAAA,SAASmC,QAASjB,EAASG,GAC5DhB,KAAKC,MAAMM,KAAKqB,IAGlBhC,EAAA2B,UAAAd,IAAA,SAAII,OAAiB,IAAAG,EAAA,GAAAS,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAT,EAAAS,EAAA,GAAAC,UAAAD,GACnB,IAAMG,EAAS5B,KAAK6B,aAAalC,EAAAA,SAASuB,KAAML,EAASG,GACzDhB,KAAKC,MAAMM,KAAKqB,IAGlBhC,EAAA2B,UAAAQ,KAAA,SAAKlB,OAAiB,IAAAG,EAAA,GAAAS,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAT,EAAAS,EAAA,GAAAC,UAAAD,GACpB,IAAMG,EAAS5B,KAAK6B,aAAalC,EAAAA,SAASqC,KAAMnB,EAASG,GACzDhB,KAAKC,MAAMM,KAAKqB,IAGlBhC,EAAA2B,UAAAU,MAAA,SAAMpB,OAAiB,IAAAG,EAAA,GAAAS,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAT,EAAAS,EAAA,GAAAC,UAAAD,GACrB,IAAMG,EAAS5B,KAAK6B,aAAalC,EAAAA,SAASuC,MAAOrB,EAASG,GAC1DhB,KAAKC,MAAMM,KAAKqB,IAGlBhC,EAAA2B,UAAAY,aAAA,SAAatC,GACX,IAAKG,KAAKmB,cAAciB,IAAIvC,GAAO,CACjC,IAAMwC,EAAkB,IAAIzC,EAAWC,EAAMG,MAK7CA,KAAKmB,cAAcmB,IAAIzC,EAAMwC,GAE/B,OAAOrC,KAAKmB,cAAcoB,IAAI1C,IAGxBD,EAAA2B,UAAAM,aAAA,SACNZ,EACAJ,EACAG,GAEA,MAAO,CACLC,MAAKA,EACLJ,QAAOA,EACPG,KAAIA,EACJL,UAAWD,KAAK8B,MAChB3C,KAAMG,KAAKH,YA/EQD,EAAAyB,KAAO,IAAIzB,EAAW,QAE7BA,EAAA6C,QAAU7C,EAAWyB,KAAKlB,KAAKuC,KAC7CC,EAAAA,MAAK,SAACC,EAAKC,GAKT,OAJAD,EAAIE,KAAKD,GACLD,EAAIjB,OAAS,KACfiB,EAAIG,QAECH,IACN,IACHI,EAAAA,YAAY,qCAzBHpD,GAAUqD,EAAAC,SAGX,WAAU,GAAAD,EAAAC,SAIFtD,EAAU,0CAPjBA,EAAUuD,QAAVvD,EAAUwD,KAAAC,WAFT,yEAEDzD,EAAU,CAAA,MAHtB0D,EAAAA,iBAAW,CACVD,WAAY,6DAITE,EAAAA,gBACAC,EAAAA,aAAO,qBAIQ5D,EAAU6D,WAAA,CAAA,MAFzBF,EAAAA,gBACAG,EAAAA,sCCnBH,SAAAC,YAEAA,EAAApC,UAAAqC,SAAA,mDAJWD,qCAAAA,EAAYE,UAAA,CAAA,CAAA,YAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,SAPrBC,EAAAA,eAAAA,EAAAA,KACEA,EAAAA,OAAAA,EAAAA,gBACFA,EAAAA,mGAKSR,EAAY,CAAA,MAVxBS,EAAAA,gBAAU,CACTC,SAAU,UACVL,SAAU,4CAKVM,OAAQ,0CCFV,6CAAaC,iEAAAA,IAASC,QAAA,CAHX,sEAGED,EAAS,CAAA,MALrBE,EAAAA,eAAS,CACRC,aAAc,GACdF,QAAS,GACTG,QAAS","sourcesContent":["import {\n  Inject,\n  Injectable,\n  Optional,\n  EventEmitter,\n  SkipSelf,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { scan, shareReplay, take } from 'rxjs/operators';\nexport enum LogLevel {\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n}\n\nexport interface LogMessage {\n  name: string;\n  timestamp: number;\n  level: LogLevel;\n  message: string;\n  args: any[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogService {\n  constructor(\n    @Optional()\n    @Inject('log-name')\n    public name: string = 'app',\n    @Optional()\n    @SkipSelf()\n    public parent?: LogService\n  ) {\n    this.name = this.name || 'app';\n    if (this.name !== 'root' && !parent) {\n      this.parent = LogService.root;\n    }\n  }\n\n  public static readonly root = new LogService('root');\n\n  static readonly buffer$ = LogService.root.out$.pipe(\n    scan((acc, val) => {\n      acc.push(val as never);\n      if (acc.length > 1000) {\n        acc.shift();\n      }\n      return acc;\n    }, []),\n    shareReplay(1)\n  );\n\n  protected _out$ = new EventEmitter<LogMessage>();\n  out$ = this._out$;\n  outSub = this.out$.subscribe((m) => {\n    if (this.parent) {\n      this.parent._out$.emit(m);\n    } else {\n      console.log(\n        '%s %s %s %s',\n        m.name,\n        new Date(m.timestamp).toISOString(),\n        m.message,\n        JSON.stringify(m.args)\n      );\n    }\n  });\n\n  level: LogLevel = LogLevel.INFO;\n\n  private supplementals = new Map<string, LogService>();\n\n  static getLogger(name: string) {\n    return new LogService(name);\n  }\n\n  verbose(message: string, ...args: any[]) {\n    const packed = this.buildMessage(LogLevel.VERBOSE, message, args);\n    this._out$.emit(packed);\n  }\n\n  log(message: string, ...args: any[]) {\n    const packed = this.buildMessage(LogLevel.INFO, message, args);\n    this._out$.emit(packed);\n  }\n\n  warn(message: string, ...args: any[]) {\n    const packed = this.buildMessage(LogLevel.WARN, message, args);\n    this._out$.emit(packed);\n  }\n\n  error(message: string, ...args: any[]) {\n    const packed = this.buildMessage(LogLevel.ERROR, message, args);\n    this._out$.emit(packed);\n  }\n\n  supplemental(name: string): LogService {\n    if (!this.supplementals.has(name)) {\n      const supplementalLog = new LogService(name, this);\n      // supplementalLog.out$.subscribe((msg) => {\n      //   console.log('supplemental message', msg);\n      //   this._out$.emit(msg);\n      // });\n      this.supplementals.set(name, supplementalLog);\n    }\n    return this.supplementals.get(name) as LogService;\n  }\n\n  private buildMessage(\n    level: LogLevel,\n    message: string,\n    args: any[]\n  ): LogMessage {\n    return {\n      level,\n      message,\n      args,\n      timestamp: Date.now(),\n      name: this.name,\n    };\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-log',\n  template: `\n    <p>\n      log works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class LogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n})\nexport class LogModule {}\n"]}