import { Inject, Injectable, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { scan, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["VERBOSE"] = 0] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
})(LogLevel || (LogLevel = {}));
export class LogService {
    constructor(name = 'app') {
        this.name = name;
        this.level = LogLevel.INFO;
        this.supplementals = new Map();
        this.name = this.name || 'app';
        // LogService.out$.subscribe((p) => console.log(p.message, ...p.args));
        LogService.buffer$.subscribe((buffered) => { });
    }
    log(message, ...args) {
        const packed = this.buildMessage(LogLevel.INFO, message, args);
        LogService._out$.next(packed);
    }
    warn(message, ...args) {
        const packed = this.buildMessage(LogLevel.WARN, message, args);
        LogService._out$.next(packed);
    }
    error(message, ...args) {
        const packed = this.buildMessage(LogLevel.ERROR, message, args);
        LogService._out$.next(packed);
    }
    supplemental(name) {
        if (!this.supplementals.has(name)) {
            this.supplementals.set(name, new LogService(name));
        }
        return this.supplementals.get(name);
    }
    buildMessage(level, message, args) {
        return {
            level,
            message,
            args,
            timestamp: Date.now(),
            name: this.name,
        };
    }
}
LogService._out$ = new Subject();
LogService.out$ = LogService._out$.pipe(shareReplay(1)
// scan((acc, val) => {
//   acc.push(val as never);
//   return acc;
// }, []),
// shareReplay(1)
);
LogService.outSub = LogService.out$.subscribe((p) => console.log(`${new Date(p.timestamp).toISOString()} ${p.name} [${p.level}] ${p.message}`, ...p.args));
LogService.buffer$ = LogService.out$.pipe(scan((acc, val) => {
    acc.push(val);
    if (acc.length > 1000) {
        acc.shift();
    }
    return acc;
}, []), shareReplay(1));
LogService.ɵfac = function LogService_Factory(t) { return new (t || LogService)(i0.ɵɵinject('log-name', 8)); };
LogService.ɵprov = i0.ɵɵdefineInjectable({ token: LogService, factory: LogService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(LogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: ['log-name']
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9sb2cvc3JjL2xpYi9sb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBUSxNQUFNLGdCQUFnQixDQUFDOztBQUN6RCxNQUFNLENBQU4sSUFBWSxRQUtYO0FBTEQsV0FBWSxRQUFRO0lBQ2xCLDZDQUFPLENBQUE7SUFDUCx1Q0FBSSxDQUFBO0lBQ0osdUNBQUksQ0FBQTtJQUNKLHlDQUFLLENBQUE7QUFDUCxDQUFDLEVBTFcsUUFBUSxLQUFSLFFBQVEsUUFLbkI7QUFhRCxNQUFNLE9BQU8sVUFBVTtJQUNyQixZQUdTLE9BQWUsS0FBSztRQUFwQixTQUFJLEdBQUosSUFBSSxDQUFnQjtRQXFDN0IsVUFBSyxHQUFhLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFFeEIsa0JBQWEsR0FBRyxJQUFJLEdBQUcsRUFBc0IsQ0FBQztRQXJDcEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQztRQUMvQix1RUFBdUU7UUFDdkUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFvQ0QsR0FBRyxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVc7UUFDakMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvRCxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVc7UUFDbEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvRCxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVc7UUFDbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQVk7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQWUsQ0FBQztJQUNwRCxDQUFDO0lBRU8sWUFBWSxDQUNsQixLQUFlLEVBQ2YsT0FBZSxFQUNmLElBQVc7UUFFWCxPQUFPO1lBQ0wsS0FBSztZQUNMLE9BQU87WUFDUCxJQUFJO1lBQ0osU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQUM7SUFDSixDQUFDOztBQXBFYyxnQkFBSyxHQUFHLElBQUksT0FBTyxFQUFjLENBQUM7QUFDMUMsZUFBSSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBRWQsdUJBQXVCO0FBQ3ZCLDRCQUE0QjtBQUM1QixnQkFBZ0I7QUFDaEIsVUFBVTtBQUNWLGlCQUFpQjtDQUNsQixDQUFDO0FBRXNCLGlCQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUMvRCxPQUFPLENBQUMsR0FBRyxDQUNULEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssS0FDMUQsQ0FBQyxDQUFDLE9BQ0osRUFBRSxFQUNGLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDVixDQUNGLENBQUM7QUFFSyxrQkFBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNuQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDaEIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFZLENBQUMsQ0FBQztJQUN2QixJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFO1FBQ3JCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNiO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQ04sV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7b0VBeENTLFVBQVUsY0FHWCxVQUFVO2tEQUhULFVBQVUsV0FBVixVQUFVLG1CQUZULE1BQU07dUZBRVAsVUFBVTtjQUh0QixVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7O3NCQUdJLFFBQVE7O3NCQUNSLE1BQU07dUJBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNjYW4sIHNoYXJlUmVwbGF5LCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICBWRVJCT1NFLFxuICBJTkZPLFxuICBXQVJOLFxuICBFUlJPUixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dNZXNzYWdlIHtcbiAgbmFtZTogc3RyaW5nO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgbGV2ZWw6IExvZ0xldmVsO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGFyZ3M6IGFueVtdO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTG9nU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdCgnbG9nLW5hbWUnKVxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSAnYXBwJ1xuICApIHtcbiAgICB0aGlzLm5hbWUgPSB0aGlzLm5hbWUgfHwgJ2FwcCc7XG4gICAgLy8gTG9nU2VydmljZS5vdXQkLnN1YnNjcmliZSgocCkgPT4gY29uc29sZS5sb2cocC5tZXNzYWdlLCAuLi5wLmFyZ3MpKTtcbiAgICBMb2dTZXJ2aWNlLmJ1ZmZlciQuc3Vic2NyaWJlKChidWZmZXJlZCkgPT4ge30pO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX291dCQgPSBuZXcgU3ViamVjdDxMb2dNZXNzYWdlPigpO1xuICBzdGF0aWMgb3V0JCA9IExvZ1NlcnZpY2UuX291dCQucGlwZShcbiAgICBzaGFyZVJlcGxheSgxKVxuXG4gICAgLy8gc2NhbigoYWNjLCB2YWwpID0+IHtcbiAgICAvLyAgIGFjYy5wdXNoKHZhbCBhcyBuZXZlcik7XG4gICAgLy8gICByZXR1cm4gYWNjO1xuICAgIC8vIH0sIFtdKSxcbiAgICAvLyBzaGFyZVJlcGxheSgxKVxuICApO1xuXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IG91dFN1YiA9IExvZ1NlcnZpY2Uub3V0JC5zdWJzY3JpYmUoKHApID0+XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgJHtuZXcgRGF0ZShwLnRpbWVzdGFtcCkudG9JU09TdHJpbmcoKX0gJHtwLm5hbWV9IFske3AubGV2ZWx9XSAke1xuICAgICAgICBwLm1lc3NhZ2VcbiAgICAgIH1gLFxuICAgICAgLi4ucC5hcmdzXG4gICAgKVxuICApO1xuXG4gIHN0YXRpYyBidWZmZXIkID0gTG9nU2VydmljZS5vdXQkLnBpcGUoXG4gICAgc2NhbigoYWNjLCB2YWwpID0+IHtcbiAgICAgIGFjYy5wdXNoKHZhbCBhcyBuZXZlcik7XG4gICAgICBpZiAoYWNjLmxlbmd0aCA+IDEwMDApIHtcbiAgICAgICAgYWNjLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKSxcbiAgICBzaGFyZVJlcGxheSgxKVxuICApO1xuICBsZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPO1xuXG4gIHByaXZhdGUgc3VwcGxlbWVudGFscyA9IG5ldyBNYXA8c3RyaW5nLCBMb2dTZXJ2aWNlPigpO1xuXG4gIGxvZyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc3QgcGFja2VkID0gdGhpcy5idWlsZE1lc3NhZ2UoTG9nTGV2ZWwuSU5GTywgbWVzc2FnZSwgYXJncyk7XG4gICAgTG9nU2VydmljZS5fb3V0JC5uZXh0KHBhY2tlZCk7XG4gIH1cblxuICB3YXJuKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBwYWNrZWQgPSB0aGlzLmJ1aWxkTWVzc2FnZShMb2dMZXZlbC5XQVJOLCBtZXNzYWdlLCBhcmdzKTtcbiAgICBMb2dTZXJ2aWNlLl9vdXQkLm5leHQocGFja2VkKTtcbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBwYWNrZWQgPSB0aGlzLmJ1aWxkTWVzc2FnZShMb2dMZXZlbC5FUlJPUiwgbWVzc2FnZSwgYXJncyk7XG4gICAgTG9nU2VydmljZS5fb3V0JC5uZXh0KHBhY2tlZCk7XG4gIH1cblxuICBzdXBwbGVtZW50YWwobmFtZTogc3RyaW5nKTogTG9nU2VydmljZSB7XG4gICAgaWYgKCF0aGlzLnN1cHBsZW1lbnRhbHMuaGFzKG5hbWUpKSB7XG4gICAgICB0aGlzLnN1cHBsZW1lbnRhbHMuc2V0KG5hbWUsIG5ldyBMb2dTZXJ2aWNlKG5hbWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3VwcGxlbWVudGFscy5nZXQobmFtZSkgYXMgTG9nU2VydmljZTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRNZXNzYWdlKFxuICAgIGxldmVsOiBMb2dMZXZlbCxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgYXJnczogYW55W11cbiAgKTogTG9nTWVzc2FnZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGFyZ3MsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgfTtcbiAgfVxufVxuIl19