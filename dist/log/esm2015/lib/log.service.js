import { Inject, Injectable, Optional, EventEmitter, SkipSelf, } from '@angular/core';
import { scan, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["VERBOSE"] = 0] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
})(LogLevel || (LogLevel = {}));
export class LogService {
    constructor(name = 'app', parent) {
        this.name = name;
        this.parent = parent;
        this._out$ = new EventEmitter();
        this.out$ = this._out$;
        this.outSub = this.out$.subscribe((m) => {
            if (this.parent) {
                this.parent._out$.emit(m);
            }
            else {
                console.log('%s %s %s %s', m.name, new Date(m.timestamp).toISOString(), m.message, JSON.stringify(m.args));
            }
        });
        this.level = LogLevel.INFO;
        this.supplementals = new Map();
        this.name = this.name || 'app';
        if (this.name !== 'root' && !parent) {
            this.parent = LogService.root;
        }
    }
    static getLogger(name) {
        return new LogService(name);
    }
    verbose(message, ...args) {
        const packed = this.buildMessage(LogLevel.VERBOSE, message, args);
        this._out$.emit(packed);
    }
    log(message, ...args) {
        const packed = this.buildMessage(LogLevel.INFO, message, args);
        this._out$.emit(packed);
    }
    warn(message, ...args) {
        const packed = this.buildMessage(LogLevel.WARN, message, args);
        this._out$.emit(packed);
    }
    error(message, ...args) {
        const packed = this.buildMessage(LogLevel.ERROR, message, args);
        this._out$.emit(packed);
    }
    supplemental(name) {
        if (!this.supplementals.has(name)) {
            const supplementalLog = new LogService(name, this);
            // supplementalLog.out$.subscribe((msg) => {
            //   console.log('supplemental message', msg);
            //   this._out$.emit(msg);
            // });
            this.supplementals.set(name, supplementalLog);
        }
        return this.supplementals.get(name);
    }
    buildMessage(level, message, args) {
        return {
            level,
            message,
            args,
            timestamp: Date.now(),
            name: this.name,
        };
    }
}
LogService.root = new LogService('root');
LogService.buffer$ = LogService.root.out$.pipe(scan((acc, val) => {
    acc.push(val);
    if (acc.length > 1000) {
        acc.shift();
    }
    return acc;
}, []), shareReplay(1));
LogService.ɵfac = function LogService_Factory(t) { return new (t || LogService)(i0.ɵɵinject('log-name', 8), i0.ɵɵinject(LogService, 12)); };
LogService.ɵprov = i0.ɵɵdefineInjectable({ token: LogService, factory: LogService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(LogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: ['log-name']
            }] }, { type: LogService, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9sb2cvc3JjL2xpYi9sb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLFVBQVUsRUFDVixRQUFRLEVBQ1IsWUFBWSxFQUNaLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBUSxNQUFNLGdCQUFnQixDQUFDOztBQUN6RCxNQUFNLENBQU4sSUFBWSxRQUtYO0FBTEQsV0FBWSxRQUFRO0lBQ2xCLDZDQUFPLENBQUE7SUFDUCx1Q0FBSSxDQUFBO0lBQ0osdUNBQUksQ0FBQTtJQUNKLHlDQUFLLENBQUE7QUFDUCxDQUFDLEVBTFcsUUFBUSxLQUFSLFFBQVEsUUFLbkI7QUFhRCxNQUFNLE9BQU8sVUFBVTtJQUNyQixZQUdTLE9BQWUsS0FBSyxFQUdwQixNQUFtQjtRQUhuQixTQUFJLEdBQUosSUFBSSxDQUFnQjtRQUdwQixXQUFNLEdBQU4sTUFBTSxDQUFhO1FBcUJsQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWMsQ0FBQztRQUNqRCxTQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNsQixXQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNCO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQ1QsYUFBYSxFQUNiLENBQUMsQ0FBQyxJQUFJLEVBQ04sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUNuQyxDQUFDLENBQUMsT0FBTyxFQUNULElBQUks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QVksQ0FBQyxDQUFDO0lBQ3ZCLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQUU7UUFDckIsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ2I7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsRUFDTixXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztvRUExQlMsVUFBVSxjQUdYLFVBQVUsa0JBSUYsVUFBVTtrREFQakIsVUFBVSxXQUFWLFVBQVUsbUJBRlQsTUFBTTt1RkFFUCxVQUFVO2NBSHRCLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7c0JBR0ksUUFBUTs7c0JBQ1IsTUFBTTt1QkFBQyxVQUFVOzBCQUlGLFVBQVU7c0JBRnpCLFFBQVE7O3NCQUNSLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbmplY3QsXG4gIEluamVjdGFibGUsXG4gIE9wdGlvbmFsLFxuICBFdmVudEVtaXR0ZXIsXG4gIFNraXBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNjYW4sIHNoYXJlUmVwbGF5LCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICBWRVJCT1NFLFxuICBJTkZPLFxuICBXQVJOLFxuICBFUlJPUixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dNZXNzYWdlIHtcbiAgbmFtZTogc3RyaW5nO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgbGV2ZWw6IExvZ0xldmVsO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGFyZ3M6IGFueVtdO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTG9nU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdCgnbG9nLW5hbWUnKVxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSAnYXBwJyxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTa2lwU2VsZigpXG4gICAgcHVibGljIHBhcmVudD86IExvZ1NlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5uYW1lID0gdGhpcy5uYW1lIHx8ICdhcHAnO1xuICAgIGlmICh0aGlzLm5hbWUgIT09ICdyb290JyAmJiAhcGFyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudCA9IExvZ1NlcnZpY2Uucm9vdDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHJvb3QgPSBuZXcgTG9nU2VydmljZSgncm9vdCcpO1xuXG4gIHN0YXRpYyByZWFkb25seSBidWZmZXIkID0gTG9nU2VydmljZS5yb290Lm91dCQucGlwZShcbiAgICBzY2FuKChhY2MsIHZhbCkgPT4ge1xuICAgICAgYWNjLnB1c2godmFsIGFzIG5ldmVyKTtcbiAgICAgIGlmIChhY2MubGVuZ3RoID4gMTAwMCkge1xuICAgICAgICBhY2Muc2hpZnQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gICk7XG5cbiAgcHJvdGVjdGVkIF9vdXQkID0gbmV3IEV2ZW50RW1pdHRlcjxMb2dNZXNzYWdlPigpO1xuICBvdXQkID0gdGhpcy5fb3V0JDtcbiAgb3V0U3ViID0gdGhpcy5vdXQkLnN1YnNjcmliZSgobSkgPT4ge1xuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgdGhpcy5wYXJlbnQuX291dCQuZW1pdChtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICclcyAlcyAlcyAlcycsXG4gICAgICAgIG0ubmFtZSxcbiAgICAgICAgbmV3IERhdGUobS50aW1lc3RhbXApLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIG0ubWVzc2FnZSxcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkobS5hcmdzKVxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIGxldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLklORk87XG5cbiAgcHJpdmF0ZSBzdXBwbGVtZW50YWxzID0gbmV3IE1hcDxzdHJpbmcsIExvZ1NlcnZpY2U+KCk7XG5cbiAgc3RhdGljIGdldExvZ2dlcihuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IExvZ1NlcnZpY2UobmFtZSk7XG4gIH1cblxuICB2ZXJib3NlKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBwYWNrZWQgPSB0aGlzLmJ1aWxkTWVzc2FnZShMb2dMZXZlbC5WRVJCT1NFLCBtZXNzYWdlLCBhcmdzKTtcbiAgICB0aGlzLl9vdXQkLmVtaXQocGFja2VkKTtcbiAgfVxuXG4gIGxvZyhtZXNzYWdlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc3QgcGFja2VkID0gdGhpcy5idWlsZE1lc3NhZ2UoTG9nTGV2ZWwuSU5GTywgbWVzc2FnZSwgYXJncyk7XG4gICAgdGhpcy5fb3V0JC5lbWl0KHBhY2tlZCk7XG4gIH1cblxuICB3YXJuKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBwYWNrZWQgPSB0aGlzLmJ1aWxkTWVzc2FnZShMb2dMZXZlbC5XQVJOLCBtZXNzYWdlLCBhcmdzKTtcbiAgICB0aGlzLl9vdXQkLmVtaXQocGFja2VkKTtcbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBwYWNrZWQgPSB0aGlzLmJ1aWxkTWVzc2FnZShMb2dMZXZlbC5FUlJPUiwgbWVzc2FnZSwgYXJncyk7XG4gICAgdGhpcy5fb3V0JC5lbWl0KHBhY2tlZCk7XG4gIH1cblxuICBzdXBwbGVtZW50YWwobmFtZTogc3RyaW5nKTogTG9nU2VydmljZSB7XG4gICAgaWYgKCF0aGlzLnN1cHBsZW1lbnRhbHMuaGFzKG5hbWUpKSB7XG4gICAgICBjb25zdCBzdXBwbGVtZW50YWxMb2cgPSBuZXcgTG9nU2VydmljZShuYW1lLCB0aGlzKTtcbiAgICAgIC8vIHN1cHBsZW1lbnRhbExvZy5vdXQkLnN1YnNjcmliZSgobXNnKSA9PiB7XG4gICAgICAvLyAgIGNvbnNvbGUubG9nKCdzdXBwbGVtZW50YWwgbWVzc2FnZScsIG1zZyk7XG4gICAgICAvLyAgIHRoaXMuX291dCQuZW1pdChtc2cpO1xuICAgICAgLy8gfSk7XG4gICAgICB0aGlzLnN1cHBsZW1lbnRhbHMuc2V0KG5hbWUsIHN1cHBsZW1lbnRhbExvZyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN1cHBsZW1lbnRhbHMuZ2V0KG5hbWUpIGFzIExvZ1NlcnZpY2U7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkTWVzc2FnZShcbiAgICBsZXZlbDogTG9nTGV2ZWwsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIGFyZ3M6IGFueVtdXG4gICk6IExvZ01lc3NhZ2Uge1xuICAgIHJldHVybiB7XG4gICAgICBsZXZlbCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBhcmdzLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==