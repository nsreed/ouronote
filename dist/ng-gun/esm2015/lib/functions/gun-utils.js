import * as Gun from 'gun';
export const gunUpdateTime = (value) => {
    const updates = Gun.node.is(value) ? value._['>'] : null;
    if (!updates) {
        return 0;
    }
    return Object.values(updates).reduce((latest, time) => time > latest ? time : latest);
};
export const gunChainArray = (value) => {
    let c = value;
    const path = [];
    do {
        if (c._.get) {
            path.push(c);
        }
        else {
            break;
        }
        c = c.back();
    } while (c.back() !== c);
    while (c.back) {
        const back = c.back();
        if (back !== c && c._.get) {
            const key = c._.get;
            path.push(key);
            c = c.back();
        }
        else {
            break;
        }
    }
    return path;
};
export const gunCertificateChain = (value) => gunChainArray(value).map((c) => c.get('certs'));
/**
 * Returns an array of keys representing the path of the given chain
 * @param value the chain to pathify
 */
export const gunPath = (value) => {
    let c = value;
    const path = [];
    while (c.back) {
        const back = c.back();
        if (back !== c && c._.get) {
            const key = c._.get;
            path.push(key);
            c = c.back();
        }
        else {
            break;
        }
    }
    return path;
};
export function parseCertificate(cert) {
    const RE_SEA_CERT = /^SEA/;
    if (!RE_SEA_CERT.test(cert)) {
        throw new Error('could not parse certificate, incorrect prefix');
    }
    const scrubbed = cert.replace(RE_SEA_CERT, '');
    return JSON.parse(scrubbed);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VuLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZ3VuL3NyYy9saWIvZnVuY3Rpb25zL2d1bi11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLEtBQUssQ0FBQztBQUczQixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRTtJQUMxQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUUsS0FBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2xFLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLENBQUMsQ0FBQztLQUNWO0lBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQVcsRUFBRSxJQUFTLEVBQUUsRUFBRSxDQUM5RCxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FDcEIsQ0FBQztBQUNkLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQXlCLEVBQUUsRUFBRTtJQUN6RCxJQUFJLENBQUMsR0FBRyxLQUFZLENBQUM7SUFDckIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLEdBQUc7UUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNkO2FBQU07WUFDTCxNQUFNO1NBQ1A7UUFDRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2QsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFO0lBRXpCLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRTtRQUNiLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLElBQUksS0FBSyxDQUFDLElBQUssQ0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUU7WUFDbEMsTUFBTSxHQUFHLEdBQUksQ0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNmLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDZDthQUFNO1lBQ0wsTUFBTTtTQUNQO0tBQ0Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQy9ELGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUVsRDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUF5QixFQUFFLEVBQUU7SUFDbkQsSUFBSSxDQUFDLEdBQUcsS0FBWSxDQUFDO0lBQ3JCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNoQixPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUU7UUFDYixNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFLLENBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQ2xDLE1BQU0sR0FBRyxHQUFJLENBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2Q7YUFBTTtZQUNMLE1BQU07U0FDUDtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCLENBQUMsSUFBWTtJQUMzQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUM7SUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBb0IsQ0FBQztBQUNqRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgR3VuIGZyb20gJ2d1bic7XG5pbXBvcnQgeyBJR3VuQ2hhaW5SZWZlcmVuY2UgfSBmcm9tICdndW4vdHlwZXMvY2hhaW4nO1xuaW1wb3J0IHsgSUd1bkNlcnRpZmljYXRlIH0gZnJvbSAnLi4vY2xhc3Nlcy9DZXJ0aWZpY2F0ZSc7XG5leHBvcnQgY29uc3QgZ3VuVXBkYXRlVGltZSA9ICh2YWx1ZTogYW55KSA9PiB7XG4gIGNvbnN0IHVwZGF0ZXMgPSBHdW4ubm9kZS5pcyh2YWx1ZSkgPyAodmFsdWUgYXMgYW55KS5fWyc+J10gOiBudWxsO1xuICBpZiAoIXVwZGF0ZXMpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyh1cGRhdGVzKS5yZWR1Y2UoKGxhdGVzdDogYW55LCB0aW1lOiBhbnkpID0+XG4gICAgdGltZSA+IGxhdGVzdCA/IHRpbWUgOiBsYXRlc3RcbiAgKSBhcyBudW1iZXI7XG59O1xuZXhwb3J0IGNvbnN0IGd1bkNoYWluQXJyYXkgPSAodmFsdWU6IElHdW5DaGFpblJlZmVyZW5jZSkgPT4ge1xuICBsZXQgYyA9IHZhbHVlIGFzIGFueTtcbiAgY29uc3QgcGF0aCA9IFtdO1xuICBkbyB7XG4gICAgaWYgKGMuXy5nZXQpIHtcbiAgICAgIHBhdGgucHVzaChjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGMgPSBjLmJhY2soKTtcbiAgfSB3aGlsZSAoYy5iYWNrKCkgIT09IGMpO1xuXG4gIHdoaWxlIChjLmJhY2spIHtcbiAgICBjb25zdCBiYWNrID0gYy5iYWNrKCk7XG4gICAgaWYgKGJhY2sgIT09IGMgJiYgKGMgYXMgYW55KS5fLmdldCkge1xuICAgICAgY29uc3Qga2V5ID0gKGMgYXMgYW55KS5fLmdldDtcbiAgICAgIHBhdGgucHVzaChrZXkpO1xuICAgICAgYyA9IGMuYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59O1xuXG5leHBvcnQgY29uc3QgZ3VuQ2VydGlmaWNhdGVDaGFpbiA9ICh2YWx1ZTogSUd1bkNoYWluUmVmZXJlbmNlKSA9PlxuICBndW5DaGFpbkFycmF5KHZhbHVlKS5tYXAoKGMpID0+IGMuZ2V0KCdjZXJ0cycpKTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGtleXMgcmVwcmVzZW50aW5nIHRoZSBwYXRoIG9mIHRoZSBnaXZlbiBjaGFpblxuICogQHBhcmFtIHZhbHVlIHRoZSBjaGFpbiB0byBwYXRoaWZ5XG4gKi9cbmV4cG9ydCBjb25zdCBndW5QYXRoID0gKHZhbHVlOiBJR3VuQ2hhaW5SZWZlcmVuY2UpID0+IHtcbiAgbGV0IGMgPSB2YWx1ZSBhcyBhbnk7XG4gIGNvbnN0IHBhdGggPSBbXTtcbiAgd2hpbGUgKGMuYmFjaykge1xuICAgIGNvbnN0IGJhY2sgPSBjLmJhY2soKTtcbiAgICBpZiAoYmFjayAhPT0gYyAmJiAoYyBhcyBhbnkpLl8uZ2V0KSB7XG4gICAgICBjb25zdCBrZXkgPSAoYyBhcyBhbnkpLl8uZ2V0O1xuICAgICAgcGF0aC5wdXNoKGtleSk7XG4gICAgICBjID0gYy5iYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNlcnRpZmljYXRlKGNlcnQ6IHN0cmluZykge1xuICBjb25zdCBSRV9TRUFfQ0VSVCA9IC9eU0VBLztcbiAgaWYgKCFSRV9TRUFfQ0VSVC50ZXN0KGNlcnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcGFyc2UgY2VydGlmaWNhdGUsIGluY29ycmVjdCBwcmVmaXgnKTtcbiAgfVxuICBjb25zdCBzY3J1YmJlZCA9IGNlcnQucmVwbGFjZShSRV9TRUFfQ0VSVCwgJycpO1xuICByZXR1cm4gSlNPTi5wYXJzZShzY3J1YmJlZCkgYXMgSUd1bkNlcnRpZmljYXRlO1xufVxuIl19