import { __awaiter, __decorate, __param } from "tslib";
import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';
import * as Gun from 'gun';
import { from, fromEventPattern, of, Subject, throwError, } from 'rxjs';
import { debounceTime, delay, filter, map, mergeAll, mergeMap, retryWhen, scan, shareReplay, take, timeout, } from 'rxjs/operators';
import { tap } from 'rxjs/operators';
import { gunPath, gunChainArray, } from '../functions/gun-utils';
import * as i0 from "@angular/core";
export const GUN_NODE = Symbol('GUN_NODE');
export class GunChain {
    constructor(ngZone, gun) {
        this.ngZone = ngZone;
        this.isNested = false;
        this.certificate$ = new Subject();
        this.certificates = {};
        this.sources = new Map();
        this._auth = null;
        if (!gun) {
            this.gun = new Gun();
        }
        else {
            this.gun = gun;
        }
    }
    get gun() {
        return this._gun;
    }
    set gun(value) {
        var _a;
        this._gun = value;
        const myKey = value._.get;
        const path = gunPath(value);
        const chainArray = gunChainArray(value);
        this.path = path;
        const userPair = this.gun.user().is;
        if (!userPair) {
            // TODO figure out how to handle this case
            console.warn('NO PAIR');
            return;
        }
        const myPub = `~${(_a = this.gun.user().is) === null || _a === void 0 ? void 0 : _a.pub}`;
        const pubs = path.filter((key) => key.startsWith('~'));
        if (pubs.length === 0 || pubs[0] !== myPub) {
            pubs.push(myPub);
        }
        if (pubs.length > 1) {
            this.isNested = true;
            this.recordPub = pubs[0];
            const firstPub = path.findIndex((key) => key.startsWith('~'));
            const pathFromRecord = [...path];
            const recordPath = pathFromRecord.splice(firstPub).reverse();
            pathFromRecord.reverse();
            if (myKey === this.recordPub) {
                console.log('sub root', myKey);
            }
            else {
                const keyInRecord = pathFromRecord[0];
                const record = chainArray[firstPub];
                const recordCerts = record.get('certs');
                const pathCerts = recordCerts.get(keyInRecord);
                const myCert = pathCerts.get(userPair.pub);
                // console.log('  %s', keyInRecord);
                myCert.on((cert) => __awaiter(this, void 0, void 0, function* () {
                    if (cert === null || cert === undefined) {
                        return;
                    }
                    // console.log('cert', cert);
                    // TODO verify cert later, the await causes chained put() calls to fail
                    // const verified = await SEA.verify(
                    //   cert,
                    //   this.recordPub.replace('~', '')
                    // );
                    this.certificate = cert;
                    this.certificate$.next(cert);
                    // console.log(
                    //   'verified cert for %s.%s',
                    //   this.recordPub,
                    //   keyInRecord,
                    //   pathFromRecord.join('.')
                    // );
                }));
                this.record = record;
            }
        }
    }
    from(gun) {
        return new GunChain(this.ngZone, gun);
    }
    get(key) {
        const soul = this.getSoul(key);
        return this.from(this.gun.get(soul));
    }
    put(data, certificate = this.certificate) {
        // FIXME "unverified data" - certified put values must be signed?
        if (this.isNested && !certificate) {
            console.warn('NO CERTIFICATE FOUND FOR FOREIGN RECORD!');
        }
        const result = this.from(this.gun.put(data, null, certificate ? { opt: { cert: certificate } } : undefined));
        // this.once().subscribe((me) => {
        //   console.log('me', me);
        // });
        return result;
    }
    set(data) {
        // TODO get certificate for set()
        return this.from(this.gun.set(data));
    }
    unset(data) {
        if (this.gun.unset) {
            return this.from(this.gun.unset(data));
        }
        else {
            throw new Error('CANNOT FIND Gun.chain.unset!');
        }
    }
    query(query) {
        return this.from(this.gun.get(query));
    }
    load() {
        // return this.from((this.gun as any).load((d: any) => d) as any);
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.load((data) => {
                const converted = data;
                this.ngZone.run(() => {
                    handler(converted);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(take(1));
    }
    open() {
        // return this.from((this.gun as any).load((d: any) => d) as any);
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.open((data) => {
                const converted = data;
                this.ngZone.run(() => {
                    handler(converted);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(debounceTime(25));
    }
    map(options) {
        return this.from(this.gun.map());
    }
    reduce(options) {
        const base = this.from(this.gun.map());
        return base.on({ includeKeys: true }).pipe(scan((acc, val) => {
            if (val[0] === null || undefined === val[0]) {
                delete acc[val[1]];
            }
            else {
                acc[val[1]] = val[0];
            }
            return acc;
        }, {}), map((v) => (options === null || options === void 0 ? void 0 : options.includeNulls) ? v
            : Object.values(v).filter((ov) => ov !== undefined)), debounceTime(100));
    }
    not() {
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            if (this.gun.not) {
                this.gun.not((key) => {
                    handler(key);
                });
            }
        });
    }
    on(options) {
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.on((data, key, at, ev) => {
                if (signal.stopped) {
                    return ev.off();
                }
                const dispatchHandler = () => {
                    if (options === null || options === void 0 ? void 0 : options.includeKeys) {
                        handler(data, key);
                    }
                    else {
                        handler(data);
                    }
                };
                // FIXME: ngZone.run() causes infinite recursion
                if (options === null || options === void 0 ? void 0 : options.bypassZone) {
                    dispatchHandler();
                }
                else {
                    this.ngZone.run(dispatchHandler);
                }
            }, options);
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        });
    }
    once() {
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.once((data, key, at, ev) => {
                if (ev && signal.stopped) {
                    return ev.off();
                }
                this.ngZone.run(() => {
                    handler(data);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(take(1));
    }
    auth() {
        if (!this._auth) {
            this._auth = new GunAuthChain(this.ngZone, 
            //// no fix for this... gun.user.is is static! can't have multiple logins on a single gun instance
            // TODO allow option to create a new gun instance for this auth call
            this.gun.user().recall({ sessionStorage: true }), this);
        }
        return this._auth;
    }
    user(pubKey) {
        return this.from(this.gun.user(pubKey === null || pubKey === void 0 ? void 0 : pubKey.replace(/^~/, '')));
    }
    onEvent(event, node = this.gun) {
        if (!this.sources.has(event)) {
            const source = fromEventPattern((handler) => {
                // console.log('add handler');
                node.on(event, (...args) => {
                    this.ngZone.run(() => {
                        handler(...args);
                    });
                });
            }).pipe(shareReplay(1));
            this.sources.set(event, source);
        }
        return this.sources.get(event);
    }
    getSoul(key) {
        return typeof key === 'object' && Gun.node.is(key)
            ? Gun.node.soul(key)
            : key;
    }
}
GunChain.ɵfac = function GunChain_Factory(t) { return new (t || GunChain)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(GUN_NODE, 8)); };
GunChain.ɵprov = i0.ɵɵdefineInjectable({ token: GunChain, factory: GunChain.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(GunChain, [{
        type: Injectable
    }], function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [GUN_NODE]
            }] }]; }, null); })();
/** Represents a top-level authenticated node (user or key pair) */
let GunAuthChain = class GunAuthChain extends GunChain {
    constructor(ngZone, gun, root) {
        super(ngZone, gun);
        this.root = root;
        this.auth$ = this.root.onEvent('auth').pipe(tap((ack) => {
            if (!ack.err) {
                this.is = ack.put;
            }
        }), shareReplay(1));
        this.is = gun.is;
    }
    login(alias, pass) {
        const auth$ = this.root.onEvent('auth').pipe(filter((ack) => !ack.err), filter((ack) => {
            return ack.put.alias === alias;
        }), take(1));
        const login$ = fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.auth(alias, pass, (ack) => {
                this.ngZone.run(() => {
                    handler(ack);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(mergeMap((ack) => (ack.wait ? throwError(new Error(ack)) : of(ack))), retryWhen((errors) => errors.pipe(delay(1000), take(10))));
        const loginOrAuth$ = from([auth$, login$]).pipe(mergeAll(), take(1));
        return loginOrAuth$;
    }
    create(alias, pass) {
        const auth$ = this.root.onEvent('auth').pipe(filter((ack) => {
            return ack.put.alias === alias;
        }), take(1));
        this.gun.create(alias, pass);
        return auth$;
    }
    secret(value) {
        if (this.gun.secret) {
            return this.from(this.gun.secret(value));
        }
        throw new Error('GUN.chain.secret NOT FOUND');
    }
    from(gun) {
        return new GunAuthChain(this.ngZone, gun, this.root);
    }
    recall() {
        this.gun.recall({ sessionStorage: true });
        return this.auth$.pipe(timeout(5000));
    }
    logout() {
        this.gun.leave();
    }
    put(data, certificate = this.certificate) {
        return super.put(data, certificate);
    }
};
GunAuthChain = __decorate([
    __param(1, Optional()),
    __param(1, SkipSelf()),
    __param(2, Optional()), __param(2, SkipSelf())
], GunAuthChain);
export { GunAuthChain };
/** Represents a node nested under a user/pair
 * gun.user() : AuthChain
 * gun.user(pub) : UserChain
 * gun.get('~@alias') : GunChain<{pub: string}>
 */
export class GunCertChain extends GunChain {
}
//# sourceMappingURL=data:application/json;base64,