import { __awaiter, __decorate, __param } from "tslib";
import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';
import * as Gun from 'gun';
import { from, fromEventPattern, of, Subject, throwError, } from 'rxjs';
import { debounceTime, delay, filter, map, mergeAll, mergeMap, retryWhen, scan, shareReplay, take, timeout, } from 'rxjs/operators';
import { tap } from 'rxjs/operators';
import { gunPath, gunChainArray, } from '../functions/gun-utils';
import * as i0 from "@angular/core";
export const GUN_NODE = Symbol('GUN_NODE');
export class GunChain {
    constructor(ngZone, gun) {
        this.ngZone = ngZone;
        this.isNested = false;
        this.certificate$ = new Subject();
        this.certificates = {};
        this.sources = new Map();
        this._auth = null;
        if (!gun) {
            this.gun = new Gun();
        }
        else {
            this.gun = gun;
        }
    }
    get gun() {
        return this._gun;
    }
    set gun(value) {
        var _a;
        this._gun = value;
        const myKey = value._.get;
        const path = gunPath(value);
        const chainArray = gunChainArray(value);
        this.path = path;
        const userPair = this.gun.user().is;
        if (!userPair) {
            // TODO figure out how to handle this case
            return;
        }
        const myPub = `~${(_a = this.gun.user().is) === null || _a === void 0 ? void 0 : _a.pub}`;
        const pubs = path.filter((key) => key.startsWith('~'));
        if (pubs.length === 0 || pubs[0] !== myPub) {
            pubs.push(myPub);
        }
        if (pubs.length > 1) {
            this.isNested = true;
            this.recordPub = pubs[0];
            const firstPub = path.findIndex((key) => key.startsWith('~'));
            const pathFromRecord = [...path];
            const recordPath = pathFromRecord.splice(firstPub).reverse();
            pathFromRecord.reverse();
            if (myKey === this.recordPub) {
                // console.log('sub root', myKey);
            }
            else {
                const keyInRecord = pathFromRecord[0];
                const record = chainArray[firstPub];
                const recordCerts = record.get('certs');
                const pathCerts = recordCerts.get(keyInRecord);
                const myCert = pathCerts.get(userPair.pub);
                // console.log('  %s', keyInRecord);
                myCert.on((cert) => __awaiter(this, void 0, void 0, function* () {
                    if (cert === null || cert === undefined) {
                        return;
                    }
                    // console.log('cert', cert);
                    // TODO verify cert later, the await causes chained put() calls to fail
                    // const verified = await SEA.verify(
                    //   cert,
                    //   this.recordPub.replace('~', '')
                    // );
                    this.certificate = cert;
                    this.certificate$.next(cert);
                    // console.log(
                    //   'verified cert for %s.%s',
                    //   this.recordPub,
                    //   keyInRecord,
                    //   pathFromRecord.join('.')
                    // );
                }));
                this.record = record;
            }
        }
    }
    from(gun) {
        return new GunChain(this.ngZone, gun);
    }
    get(key) {
        const soul = this.getSoul(key);
        return this.from(this.gun.get(soul));
    }
    put(data, certificate = this.certificate) {
        // FIXME "unverified data" - certified put values must be signed?
        if (this.isNested && !certificate) {
            console.warn('NO CERTIFICATE FOUND FOR FOREIGN RECORD!');
        }
        const result = this.from(this.gun.put(data, null, certificate ? { opt: { cert: certificate } } : undefined));
        // this.once().subscribe((me) => {
        //   console.log('me', me);
        // });
        return result;
    }
    set(data) {
        // TODO get certificate for set()
        return this.from(this.gun.set(data));
    }
    unset(data) {
        if (this.gun.unset) {
            return this.from(this.gun.unset(data));
        }
        else {
            throw new Error('CANNOT FIND Gun.chain.unset!');
        }
    }
    query(query) {
        return this.from(this.gun.get(query));
    }
    load() {
        // return this.from((this.gun as any).load((d: any) => d) as any);
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.load((data) => {
                const converted = data;
                this.ngZone.run(() => {
                    handler(converted);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(take(1));
    }
    open() {
        // return this.from((this.gun as any).load((d: any) => d) as any);
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.open((data) => {
                const converted = data;
                this.ngZone.run(() => {
                    handler(converted);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(debounceTime(25));
    }
    map(options) {
        return this.from(this.gun.map());
    }
    reduce(options) {
        const base = this.from(this.gun.map());
        return base.on({ includeKeys: true }).pipe(scan((acc, val) => {
            if (val[0] === null || undefined === val[0]) {
                delete acc[val[1]];
            }
            else {
                acc[val[1]] = val[0];
            }
            return acc;
        }, {}), map((v) => (options === null || options === void 0 ? void 0 : options.includeNulls) ? v
            : Object.values(v).filter((ov) => ov !== undefined)), debounceTime(100));
    }
    not() {
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            if (this.gun.not) {
                this.gun.not((key) => {
                    handler(key);
                });
            }
        });
    }
    on(options) {
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.on((data, key, at, ev) => {
                if (signal.stopped) {
                    return ev.off();
                }
                const dispatchHandler = () => {
                    if (options === null || options === void 0 ? void 0 : options.includeKeys) {
                        handler(data, key);
                    }
                    else {
                        handler(data);
                    }
                };
                // FIXME: ngZone.run() causes infinite recursion
                if (options === null || options === void 0 ? void 0 : options.bypassZone) {
                    dispatchHandler();
                }
                else {
                    this.ngZone.run(dispatchHandler);
                }
            }, options);
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        });
    }
    once() {
        return fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.once((data, key, at, ev) => {
                if (ev && signal.stopped) {
                    return ev.off();
                }
                this.ngZone.run(() => {
                    handler(data);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(take(1));
    }
    auth() {
        if (!this._auth) {
            this._auth = new GunAuthChain(this.ngZone, 
            //// no fix for this... gun.user.is is static! can't have multiple logins on a single gun instance
            // TODO allow option to create a new gun instance for this auth call
            this.gun.user().recall({ sessionStorage: true }), this);
        }
        return this._auth;
    }
    user(pubKey) {
        return this.from(this.gun.user(pubKey === null || pubKey === void 0 ? void 0 : pubKey.replace(/^~/, '')));
    }
    onEvent(event, node = this.gun) {
        if (!this.sources.has(event)) {
            const source = fromEventPattern((handler) => {
                // console.log('add handler');
                node.on(event, (...args) => {
                    this.ngZone.run(() => {
                        handler(...args);
                    });
                });
            }).pipe(shareReplay(1));
            this.sources.set(event, source);
        }
        return this.sources.get(event);
    }
    getSoul(key) {
        return typeof key === 'object' && Gun.node.is(key)
            ? Gun.node.soul(key)
            : key;
    }
}
GunChain.ɵfac = function GunChain_Factory(t) { return new (t || GunChain)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(GUN_NODE, 8)); };
GunChain.ɵprov = i0.ɵɵdefineInjectable({ token: GunChain, factory: GunChain.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(GunChain, [{
        type: Injectable
    }], function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [GUN_NODE]
            }] }]; }, null); })();
/** Represents a top-level authenticated node (user or key pair) */
let GunAuthChain = class GunAuthChain extends GunChain {
    constructor(ngZone, gun, root) {
        super(ngZone, gun);
        this.root = root;
        this.auth$ = this.root.onEvent('auth').pipe(tap((ack) => {
            if (!ack.err) {
                this.is = ack.put;
            }
        }), shareReplay(1));
        this.is = gun.is;
    }
    login(alias, pass) {
        const auth$ = this.root.onEvent('auth').pipe(filter((ack) => !ack.err), filter((ack) => {
            return ack.put.alias === alias;
        }), take(1));
        const login$ = fromEventPattern((handler) => {
            const signal = { stopped: false };
            this.gun.auth(alias, pass, (ack) => {
                this.ngZone.run(() => {
                    handler(ack);
                });
            });
            return signal;
        }, (handler, signal) => {
            signal.stopped = true;
        }).pipe(mergeMap((ack) => (ack.wait ? throwError(new Error(ack)) : of(ack))), retryWhen((errors) => errors.pipe(delay(1000), take(10))));
        const loginOrAuth$ = from([auth$, login$]).pipe(mergeAll(), take(1));
        return loginOrAuth$;
    }
    create(alias, pass) {
        const auth$ = this.root.onEvent('auth').pipe(filter((ack) => {
            return ack.put.alias === alias;
        }), take(1));
        this.gun.create(alias, pass);
        return auth$;
    }
    secret(value) {
        if (this.gun.secret) {
            return this.from(this.gun.secret(value));
        }
        throw new Error('GUN.chain.secret NOT FOUND');
    }
    from(gun) {
        return new GunAuthChain(this.ngZone, gun, this.root);
    }
    recall() {
        this.gun.recall({ sessionStorage: true });
        return this.auth$.pipe(timeout(5000));
    }
    logout() {
        this.gun.leave();
    }
    put(data, certificate = this.certificate) {
        return super.put(data, certificate);
    }
};
GunAuthChain = __decorate([
    __param(1, Optional()),
    __param(1, SkipSelf()),
    __param(2, Optional()), __param(2, SkipSelf())
], GunAuthChain);
export { GunAuthChain };
/** Represents a node nested under a user/pair
 * gun.user() : AuthChain
 * gun.user(pub) : UserChain
 * gun.get('~@alias') : GunChain<{pub: string}>
 */
export class GunCertChain extends GunChain {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VuQ2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1ndW4vc3JjL2xpYi9jbGFzc2VzL0d1bkNoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBVSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sS0FBSyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBVTNCLE9BQU8sRUFDTCxJQUFJLEVBQ0osZ0JBQWdCLEVBRWhCLEVBQUUsRUFDRixPQUFPLEVBQ1AsVUFBVSxHQUNYLE1BQU0sTUFBTSxDQUFDO0FBQ2QsT0FBTyxFQUNMLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLEdBQUcsRUFDSCxRQUFRLEVBQ1IsUUFBUSxFQUNSLFNBQVMsRUFDVCxJQUFJLEVBQ0osV0FBVyxFQUVYLElBQUksRUFDSixPQUFPLEdBQ1IsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJckMsT0FBTyxFQUNMLE9BQU8sRUFDUCxhQUFhLEdBRWQsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFaEMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQStCM0MsTUFBTSxPQUFPLFFBQVE7SUFzRm5CLFlBQ1ksTUFBYyxFQUd4QixHQUVjO1FBTEosV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQWpGMUIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUtqQixpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7UUF5RnJDLGlCQUFZLEdBQWUsRUFBRSxDQUFDO1FBQ3RCLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBMkIsQ0FBQztRQUM3QyxVQUFLLEdBQWdELElBQUksQ0FBQztRQVJoRSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsSUFBSSxD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bCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIEd1biBmcm9tICdndW4nO1xuaW1wb3J0IHsgSUd1bkNoYWluUmVmZXJlbmNlIH0gZnJvbSAnZ3VuL3R5cGVzL2NoYWluJztcbmltcG9ydCB7IElHdW5TdGF0aWNTRUEgfSBmcm9tICdndW4vdHlwZXMvc3RhdGljL3NlYSc7XG5pbXBvcnQge1xuICBBbHdheXNEaXNhbGxvd2VkVHlwZSxcbiAgQXJyYXlBc1JlY29yZCxcbiAgQXJyYXlPZixcbiAgRGlzYWxsb3dBcnJheSxcbiAgRGlzYWxsb3dQcmltaXRpdmVzLFxufSBmcm9tICdndW4vdHlwZXMvdHlwZXMnO1xuaW1wb3J0IHtcbiAgZnJvbSxcbiAgZnJvbUV2ZW50UGF0dGVybixcbiAgT2JzZXJ2YWJsZSxcbiAgb2YsXG4gIFN1YmplY3QsXG4gIHRocm93RXJyb3IsXG59IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgZGVib3VuY2VUaW1lLFxuICBkZWxheSxcbiAgZmlsdGVyLFxuICBtYXAsXG4gIG1lcmdlQWxsLFxuICBtZXJnZU1hcCxcbiAgcmV0cnlXaGVuLFxuICBzY2FuLFxuICBzaGFyZVJlcGxheSxcbiAgc3dpdGNoTWFwLFxuICB0YWtlLFxuICB0aW1lb3V0LFxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMZXhpY2FsUXVlcnkgfSBmcm9tICcuL0xleGljYWxRdWVyeSc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJR3VuUGVlciB9IGZyb20gJy4vSUd1blBlZXInO1xuaW1wb3J0IHsgU0VBIH0gZnJvbSAnZ3VuJztcbmltcG9ydCB7IElDZXJ0U3RvcmUgfSBmcm9tICcuL0lDZXJ0U3RvcmUnO1xuaW1wb3J0IHtcbiAgZ3VuUGF0aCxcbiAgZ3VuQ2hhaW5BcnJheSxcbiAgcGFyc2VDZXJ0aWZpY2F0ZSxcbn0gZnJvbSAnLi4vZnVuY3Rpb25zL2d1bi11dGlscyc7XG5cbmV4cG9ydCBjb25zdCBHVU5fTk9ERSA9IFN5bWJvbCgnR1VOX05PREUnKTtcblxuZXhwb3J0IGludGVyZmFjZSBHdW5DaGFpbkNhbGxiYWNrT3B0aW9ucyB7XG4gIGluY2x1ZGVLZXlzPzogYm9vbGVhbjtcbiAgaW5jbHVkZU51bGxzPzogYm9vbGVhbjtcbiAgY2hhbmdlcz86IGJvb2xlYW47XG4gIGJ5cGFzc1pvbmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEd1bkNoYWluRnVuY3Rpb25zIHtcbiAgc2VjcmV0OiAodmFsdWU6IGFueSkgPT4gSUd1bkNoYWluUmVmZXJlbmNlO1xuICBncmFudDogKHZhbHVlOiBhbnkpID0+IElHdW5DaGFpblJlZmVyZW5jZTtcbn1cblxuaW50ZXJmYWNlIElHdW5QZWVycyB7XG4gIFtrZXk6IHN0cmluZ106IElHdW5QZWVyO1xufVxuXG5pbnRlcmZhY2UgSUd1blJvb3RPcHQge1xuICBwZWVyczogSUd1blBlZXJzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEd1bkNoYWluTWV0YSB7XG4gIF86IHtcbiAgICByb290OiB7XG4gICAgICBvcHQ6IElHdW5Sb290T3B0O1xuICAgIH07XG4gIH0gJiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHdW5DaGFpbjxcbiAgRGF0YVR5cGUgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBSZWZlcmVuY2VLZXkgPSBhbnksXG4gIElzVG9wIGV4dGVuZHMgJ3ByZV9yb290JyB8ICdyb290JyB8IGZhbHNlID0gZmFsc2Vcbj4ge1xuICBwYXRoITogc3RyaW5nW107XG4gIGlzTmVzdGVkID0gZmFsc2U7XG4gIHJlY29yZFB1YiE6IGFueTtcbiAgcmVjb3JkPzogYW55O1xuICBjZXJ0aWZpY2F0ZSE6IHN0cmluZztcblxuICBjZXJ0aWZpY2F0ZSQgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG5cbiAgcHJpdmF0ZSBfZ3VuITogSUd1bkNoYWluUmVmZXJlbmNlPERhdGFUeXBlLCBSZWZlcmVuY2VLZXksIElzVG9wPiAmXG4gICAgR3VuQ2hhaW5GdW5jdGlvbnMgJlxuICAgIEd1bkNoYWluTWV0YTtcbiAgcHVibGljIGdldCBndW4oKTogSUd1bkNoYWluUmVmZXJlbmNlPERhdGFUeXBlLCBSZWZlcmVuY2VLZXksIElzVG9wPiAmXG4gICAgR3VuQ2hhaW5GdW5jdGlvbnMgJlxuICAgIEd1bkNoYWluTWV0YSB7XG4gICAgcmV0dXJuIHRoaXMuX2d1bjtcbiAgfVxuICBwdWJsaWMgc2V0IGd1bihcbiAgICB2YWx1ZTogSUd1bkNoYWluUmVmZXJlbmNlPERhdGFUeXBlLCBSZWZlcmVuY2VLZXksIElzVG9wPiAmXG4gICAgICBHdW5DaGFpbkZ1bmN0aW9ucyAmXG4gICAgICBHdW5DaGFpbk1ldGFcbiAgKSB7XG4gICAgdGhpcy5fZ3VuID0gdmFsdWU7XG4gICAgY29uc3QgbXlLZXkgPSAodmFsdWUgYXMgYW55KS5fLmdldDtcblxuICAgIGNvbnN0IHBhdGggPSBndW5QYXRoKHZhbHVlIGFzIGFueSk7XG4gICAgY29uc3QgY2hhaW5BcnJheSA9IGd1bkNoYWluQXJyYXkodmFsdWUgYXMgYW55KTtcbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuXG4gICAgY29uc3QgdXNlclBhaXIgPSAodGhpcy5ndW4udXNlcigpIGFzIGFueSkuaXM7XG4gICAgaWYgKCF1c2VyUGFpcikge1xuICAgICAgLy8gVE9ETyBmaWd1cmUgb3V0IGhvdyB0byBoYW5kbGUgdGhpcyBjYXNlXG5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbXlQdWIgPSBgfiR7KHRoaXMuZ3VuLnVzZXIoKSBhcyBhbnkpLmlzPy5wdWJ9YDtcbiAgICBjb25zdCBwdWJzID0gcGF0aC5maWx0ZXIoKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoJ34nKSk7XG4gICAgaWYgKHB1YnMubGVuZ3RoID09PSAwIHx8IHB1YnNbMF0gIT09IG15UHViKSB7XG4gICAgICBwdWJzLnB1c2gobXlQdWIpO1xuICAgIH1cbiAgICBpZiAocHVicy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmlzTmVzdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVjb3JkUHViID0gcHVic1swXTtcbiAgICAgIGNvbnN0IGZpcnN0UHViID0gcGF0aC5maW5kSW5kZXgoKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoJ34nKSk7XG4gICAgICBjb25zdCBwYXRoRnJvbVJlY29yZCA9IFsuLi5wYXRoXTtcbiAgICAgIGNvbnN0IHJlY29yZFBhdGggPSBwYXRoRnJvbVJlY29yZC5zcGxpY2UoZmlyc3RQdWIpLnJldmVyc2UoKTtcbiAgICAgIHBhdGhGcm9tUmVjb3JkLnJldmVyc2UoKTtcblxuICAgICAgaWYgKG15S2V5ID09PSB0aGlzLnJlY29yZFB1Yikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnc3ViIHJvb3QnLCBteUtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBrZXlJblJlY29yZCA9IHBhdGhGcm9tUmVjb3JkWzBdO1xuICAgICAgICBjb25zdCByZWNvcmQgPSBjaGFpbkFycmF5W2ZpcnN0UHViXTtcbiAgICAgICAgY29uc3QgcmVjb3JkQ2VydHMgPSByZWNvcmQuZ2V0KCdjZXJ0cycpO1xuICAgICAgICBjb25zdCBwYXRoQ2VydHMgPSByZWNvcmRDZXJ0cy5nZXQoa2V5SW5SZWNvcmQpO1xuICAgICAgICBjb25zdCBteUNlcnQgPSBwYXRoQ2VydHMuZ2V0KHVzZXJQYWlyLnB1Yik7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcgICVzJywga2V5SW5SZWNvcmQpO1xuICAgICAgICBteUNlcnQub24oYXN5bmMgKGNlcnQ6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChjZXJ0ID09PSBudWxsIHx8IGNlcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2VydCcsIGNlcnQpO1xuICAgICAgICAgIC8vIFRPRE8gdmVyaWZ5IGNlcnQgbGF0ZXIsIHRoZSBhd2FpdCBjYXVzZXMgY2hhaW5lZCBwdXQoKSBjYWxscyB0byBmYWlsXG4gICAgICAgICAgLy8gY29uc3QgdmVyaWZpZWQgPSBhd2FpdCBTRUEudmVyaWZ5KFxuICAgICAgICAgIC8vICAgY2VydCxcbiAgICAgICAgICAvLyAgIHRoaXMucmVjb3JkUHViLnJlcGxhY2UoJ34nLCAnJylcbiAgICAgICAgICAvLyApO1xuICAgICAgICAgIHRoaXMuY2VydGlmaWNhdGUgPSBjZXJ0O1xuICAgICAgICAgIHRoaXMuY2VydGlmaWNhdGUkLm5leHQoY2VydCk7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXG4gICAgICAgICAgLy8gICAndmVyaWZpZWQgY2VydCBmb3IgJXMuJXMnLFxuICAgICAgICAgIC8vICAgdGhpcy5yZWNvcmRQdWIsXG4gICAgICAgICAgLy8gICBrZXlJblJlY29yZCxcbiAgICAgICAgICAvLyAgIHBhdGhGcm9tUmVjb3JkLmpvaW4oJy4nKVxuICAgICAgICAgIC8vICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVjb3JkID0gcmVjb3JkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoR1VOX05PREUpXG4gICAgZ3VuOiBJR3VuQ2hhaW5SZWZlcmVuY2U8RGF0YVR5cGUsIFJlZmVyZW5jZUtleSwgSXNUb3A+ICZcbiAgICAgIEd1bkNoYWluRnVuY3Rpb25zICZcbiAgICAgIEd1bkNoYWluTWV0YVxuICApIHtcbiAgICBpZiAoIWd1bikge1xuICAgICAgdGhpcy5ndW4gPSBuZXcgR3VuKCkgYXMgYW55O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmd1biA9IGd1bjtcbiAgICB9XG4gIH1cbiAgY2VydGlmaWNhdGVzOiBJQ2VydFN0b3JlID0ge307XG4gIHByaXZhdGUgc291cmNlcyA9IG5ldyBNYXA8c3RyaW5nLCBPYnNlcnZhYmxlPGFueT4+KCk7XG4gIHByaXZhdGUgX2F1dGg6IEd1bkF1dGhDaGFpbjxEYXRhVHlwZSwgUmVmZXJlbmNlS2V5PiB8IG51bGwgPSBudWxsO1xuXG4gIGZyb208VD4oZ3VuOiBJR3VuQ2hhaW5SZWZlcmVuY2U8VD4pIHtcbiAgICByZXR1cm4gbmV3IEd1bkNoYWluPFQ+KHRoaXMubmdab25lLCBndW4gYXMgYW55KTtcbiAgfVxuXG4gIGdldDxLIGV4dGVuZHMga2V5b2YgRGF0YVR5cGU+KFxuICAgIGtleTogQXJyYXlPZjxEYXRhVHlwZT4gZXh0ZW5kcyBuZXZlciA/IEsgOiBBcnJheU9mPERhdGFUeXBlPlxuICApIHtcbiAgICBjb25zdCBzb3VsOiBBcnJheU9mPERhdGFUeXBlPiBleHRlbmRzIG5ldmVyXG4gICAgICA/IEtcbiAgICAgIDogQXJyYXlPZjxEYXRhVHlwZT4gPSB0aGlzLmdldFNvdWwoa2V5KTtcbiAgICByZXR1cm4gdGhpcy5mcm9tKHRoaXMuZ3VuLmdldChzb3VsKSk7XG4gIH1cblxuICBwdXQoXG4gICAgZGF0YTogUGFydGlhbDxcbiAgICAgIEFsd2F5c0Rpc2FsbG93ZWRUeXBlPERpc2FsbG93UHJpbWl0aXZlczxJc1RvcCwgRGlzYWxsb3dBcnJheTxEYXRhVHlwZT4+PlxuICAgID4sXG4gICAgY2VydGlmaWNhdGU6IHN0cmluZyA9IHRoaXMuY2VydGlmaWNhdGVcbiAgKSB7XG4gICAgLy8gRklYTUUgXCJ1bnZlcmlmaWVkIGRhdGFcIiAtIGNlcnRpZmllZCBwdXQgdmFsdWVzIG11c3QgYmUgc2lnbmVkP1xuXG4gICAgaWYgKHRoaXMuaXNOZXN0ZWQgJiYgIWNlcnRpZmljYXRlKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ05PIENFUlRJRklDQVRFIEZPVU5EIEZPUiBGT1JFSUdOIFJFQ09SRCEnKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5mcm9tKFxuICAgICAgKHRoaXMuZ3VuLnB1dCBhcyBhbnkpKFxuICAgICAgICBkYXRhLFxuICAgICAgICBudWxsLFxuICAgICAgICBjZXJ0aWZpY2F0ZSA/IHsgb3B0OiB7IGNlcnQ6IGNlcnRpZmljYXRlIH0gfSA6IHVuZGVmaW5lZFxuICAgICAgKVxuICAgICk7XG4gICAgLy8gdGhpcy5vbmNlKCkuc3Vic2NyaWJlKChtZSkgPT4ge1xuICAgIC8vICAgY29uc29sZS5sb2coJ21lJywgbWUpO1xuICAgIC8vIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzZXQoXG4gICAgZGF0YTogQWx3YXlzRGlzYWxsb3dlZFR5cGU8XG4gICAgICBEYXRhVHlwZSBleHRlbmRzIEFycmF5PGluZmVyIFU+XG4gICAgICAgID8gVSBleHRlbmRzIHtcbiAgICAgICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICAgICAgICAgIFtrZXk6IG51bWJlcl06IGFueTtcbiAgICAgICAgICB9XG4gICAgICAgICAgPyBBcnJheU9mPERhdGFUeXBlPlxuICAgICAgICAgIDogbmV2ZXJcbiAgICAgICAgOiBuZXZlclxuICAgID5cbiAgKSB7XG4gICAgLy8gVE9ETyBnZXQgY2VydGlmaWNhdGUgZm9yIHNldCgpXG4gICAgcmV0dXJuIHRoaXMuZnJvbSh0aGlzLmd1bi5zZXQoZGF0YSkpO1xuICB9XG5cbiAgdW5zZXQoZGF0YTogQXJyYXlPZjxEYXRhVHlwZT4pIHtcbiAgICBpZiAodGhpcy5ndW4udW5zZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZyb20odGhpcy5ndW4udW5zZXQoZGF0YSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NBTk5PVCBGSU5EIEd1bi5jaGFpbi51bnNldCEnKTtcbiAgICB9XG4gIH1cblxuICBxdWVyeShxdWVyeTogTGV4aWNhbFF1ZXJ5KTogR3VuQ2hhaW48RGF0YVR5cGUsIFJlZmVyZW5jZUtleSwgSXNUb3A+IHtcbiAgICByZXR1cm4gdGhpcy5mcm9tKHRoaXMuZ3VuLmdldChxdWVyeSBhcyBhbnkpKSBhcyBhbnk7XG4gIH1cblxuICBsb2FkKCkge1xuICAgIC8vIHJldHVybiB0aGlzLmZyb20oKHRoaXMuZ3VuIGFzIGFueSkubG9hZCgoZDogYW55KSA9PiBkKSBhcyBhbnkpO1xuICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKFxuICAgICAgKGhhbmRsZXIpID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmFsID0geyBzdG9wcGVkOiBmYWxzZSB9O1xuICAgICAgICAodGhpcy5ndW4gYXMgYW55KS5sb2FkKChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWQgPSBkYXRhO1xuICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVyKGNvbnZlcnRlZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2lnbmFsO1xuICAgICAgfSxcbiAgICAgIChoYW5kbGVyLCBzaWduYWwpID0+IHtcbiAgICAgICAgc2lnbmFsLnN0b3BwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICkucGlwZSh0YWtlKDEpKTtcbiAgfVxuICBvcGVuKCkge1xuICAgIC8vIHJldHVybiB0aGlzLmZyb20oKHRoaXMuZ3VuIGFzIGFueSkubG9hZCgoZDogYW55KSA9PiBkKSBhcyBhbnkpO1xuICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKFxuICAgICAgKGhhbmRsZXIpID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmFsID0geyBzdG9wcGVkOiBmYWxzZSB9O1xuICAgICAgICAodGhpcy5ndW4gYXMgYW55KS5vcGVuKChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWQgPSBkYXRhO1xuICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVyKGNvbnZlcnRlZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2lnbmFsO1xuICAgICAgfSxcbiAgICAgIChoYW5kbGVyLCBzaWduYWwpID0+IHtcbiAgICAgICAgc2lnbmFsLnN0b3BwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICkucGlwZShkZWJvdW5jZVRpbWUoMjUpKTtcbiAgfVxuXG4gIG1hcChvcHRpb25zPzogR3VuQ2hhaW5DYWxsYmFja09wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tKHRoaXMuZ3VuLm1hcCgpKTtcbiAgfVxuXG4gIHJlZHVjZShvcHRpb25zPzogR3VuQ2hhaW5DYWxsYmFja09wdGlvbnMpIHtcbiAgICBjb25zdCBiYXNlID0gdGhpcy5mcm9tKHRoaXMuZ3VuLm1hcCgpKTtcblxuICAgIHJldHVybiBiYXNlLm9uKHsgaW5jbHVkZUtleXM6IHRydWUgfSkucGlwZShcbiAgICAgIHNjYW4oKGFjYzogYW55LCB2YWw6IGFueSkgPT4ge1xuICAgICAgICBpZiAodmFsWzBdID09PSBudWxsIHx8IHVuZGVmaW5lZCA9PT0gdmFsWzBdKSB7XG4gICAgICAgICAgZGVsZXRlIGFjY1t2YWxbMV1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjY1t2YWxbMV1dID0gdmFsWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSBhcyBEYXRhVHlwZVtdKSxcbiAgICAgIG1hcCgodikgPT5cbiAgICAgICAgb3B0aW9ucz8uaW5jbHVkZU51bGxzXG4gICAgICAgICAgPyB2XG4gICAgICAgICAgOiBPYmplY3QudmFsdWVzKHYpLmZpbHRlcigob3YpID0+IG92ICE9PSB1bmRlZmluZWQpXG4gICAgICApLFxuICAgICAgZGVib3VuY2VUaW1lKDEwMClcbiAgICApO1xuICB9XG5cbiAgbm90KCkge1xuICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKChoYW5kbGVyKSA9PiB7XG4gICAgICBjb25zdCBzaWduYWwgPSB7IHN0b3BwZWQ6IGZhbHNlIH07XG4gICAgICBpZiAodGhpcy5ndW4ubm90KSB7XG4gICAgICAgIHRoaXMuZ3VuLm5vdCgoa2V5OiBSZWZlcmVuY2VLZXkpID0+IHtcbiAgICAgICAgICBoYW5kbGVyKGtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb24oXG4gICAgb3B0aW9ucz86IEd1bkNoYWluQ2FsbGJhY2tPcHRpb25zXG4gICk6IE9ic2VydmFibGU8QWx3YXlzRGlzYWxsb3dlZFR5cGU8QXJyYXlBc1JlY29yZDxEYXRhVHlwZT4+PiB7XG4gICAgcmV0dXJuIGZyb21FdmVudFBhdHRlcm4oXG4gICAgICAoaGFuZGxlcikgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWwgPSB7IHN0b3BwZWQ6IGZhbHNlIH07XG4gICAgICAgIHRoaXMuZ3VuLm9uKFxuICAgICAgICAgIChcbiAgICAgICAgICAgIGRhdGE6IEFsd2F5c0Rpc2FsbG93ZWRUeXBlPEFycmF5QXNSZWNvcmQ8RGF0YVR5cGU+PixcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGF0PzogYW55LFxuICAgICAgICAgICAgZXY/OiBhbnlcbiAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGlmIChzaWduYWwuc3RvcHBlZCkge1xuICAgICAgICAgICAgICByZXR1cm4gZXYub2ZmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkaXNwYXRjaEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb25zPy5pbmNsdWRlS2V5cykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoZGF0YSwga2V5KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gRklYTUU6IG5nWm9uZS5ydW4oKSBjYXVzZXMgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgICAgICAgICBpZiAob3B0aW9ucz8uYnlwYXNzWm9uZSkge1xuICAgICAgICAgICAgICBkaXNwYXRjaEhhbmRsZXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bihkaXNwYXRjaEhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb3B0aW9ucyBhcyBhbnlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHNpZ25hbDtcbiAgICAgIH0sXG4gICAgICAoaGFuZGxlciwgc2lnbmFsKSA9PiB7XG4gICAgICAgIHNpZ25hbC5zdG9wcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgb25jZSgpIHtcbiAgICByZXR1cm4gZnJvbUV2ZW50UGF0dGVybihcbiAgICAgIChoYW5kbGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbCA9IHsgc3RvcHBlZDogZmFsc2UgfTtcbiAgICAgICAgdGhpcy5ndW4ub25jZShcbiAgICAgICAgICAoXG4gICAgICAgICAgICBkYXRhOlxuICAgICAgICAgICAgICB8IEFsd2F5c0Rpc2FsbG93ZWRUeXBlPEFycmF5QXNSZWNvcmQ8RGF0YVR5cGU+PlxuICAgICAgICAgICAgICB8IERpc2FsbG93UHJpbWl0aXZlczxcbiAgICAgICAgICAgICAgICAgIElzVG9wLFxuICAgICAgICAgICAgICAgICAgQWx3YXlzRGlzYWxsb3dlZFR5cGU8QXJyYXlBc1JlY29yZDxEYXRhVHlwZT4+XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGF0PzogYW55LFxuICAgICAgICAgICAgZXY/OiBhbnlcbiAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGlmIChldiAmJiBzaWduYWwuc3RvcHBlZCkge1xuICAgICAgICAgICAgICByZXR1cm4gZXYub2ZmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICBoYW5kbGVyKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gc2lnbmFsO1xuICAgICAgfSxcbiAgICAgIChoYW5kbGVyLCBzaWduYWwpID0+IHtcbiAgICAgICAgc2lnbmFsLnN0b3BwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICkucGlwZSh0YWtlKDEpKTtcbiAgfVxuXG4gIGF1dGgoKSB7XG4gICAgaWYgKCF0aGlzLl9hdXRoKSB7XG4gICAgICB0aGlzLl9hdXRoID0gbmV3IEd1bkF1dGhDaGFpbjxEYXRhVHlwZSwgUmVmZXJlbmNlS2V5PihcbiAgICAgICAgdGhpcy5uZ1pvbmUsXG4gICAgICAgIC8vLy8gbm8gZml4IGZvciB0aGlzLi4uIGd1bi51c2VyLmlzIGlzIHN0YXRpYyEgY2FuJ3QgaGF2ZSBtdWx0aXBsZSBsb2dpbnMgb24gYSBzaW5nbGUgZ3VuIGluc3RhbmNlXG4gICAgICAgIC8vIFRPRE8gYWxsb3cgb3B0aW9uIHRvIGNyZWF0ZSBhIG5ldyBndW4gaW5zdGFuY2UgZm9yIHRoaXMgYXV0aCBjYWxsXG4gICAgICAgIHRoaXMuZ3VuLnVzZXIoKS5yZWNhbGwoeyBzZXNzaW9uU3RvcmFnZTogdHJ1ZSB9KSBhcyBhbnksXG4gICAgICAgIHRoaXMgYXMgYW55XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYXV0aDtcbiAgfVxuXG4gIHVzZXIocHViS2V5Pzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbSh0aGlzLmd1bi51c2VyKHB1YktleT8ucmVwbGFjZSgvXn4vLCAnJykpKTtcbiAgfVxuXG4gIG9uRXZlbnQoZXZlbnQ6IHN0cmluZywgbm9kZSA9IHRoaXMuZ3VuKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAoIXRoaXMuc291cmNlcy5oYXMoZXZlbnQpKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBmcm9tRXZlbnRQYXR0ZXJuKChoYW5kbGVyKSA9PiB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdhZGQgaGFuZGxlcicpO1xuICAgICAgICAobm9kZSBhcyBhbnkpLm9uKGV2ZW50LCAoLi4uYXJnczogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXIoLi4uYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSkucGlwZShzaGFyZVJlcGxheSgxKSk7XG4gICAgICB0aGlzLnNvdXJjZXMuc2V0KGV2ZW50LCBzb3VyY2UpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzLmdldChldmVudCkgYXMgT2JzZXJ2YWJsZTxhbnk+O1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFNvdWwoa2V5OiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gJ29iamVjdCcgJiYgR3VuLm5vZGUuaXMoa2V5KVxuICAgICAgPyAoR3VuLm5vZGUuc291bChrZXkpIGFzIGFueSlcbiAgICAgIDoga2V5O1xuICB9XG59XG5cbi8qKiBSZXByZXNlbnRzIGEgdG9wLWxldmVsIGF1dGhlbnRpY2F0ZWQgbm9kZSAodXNlciBvciBrZXkgcGFpcikgKi9cbmV4cG9ydCBjbGFzcyBHdW5BdXRoQ2hhaW48XG4gIERhdGFUeXBlID0gUmVjb3JkPHN0cmluZywgYW55PixcbiAgUmVmZXJlbmNlS2V5ID0gYW55LFxuICBJc1RvcCA9IGZhbHNlXG4+IGV4dGVuZHMgR3VuQ2hhaW48RGF0YVR5cGUsIFJlZmVyZW5jZUtleSwgZmFsc2U+IHtcbiAgaXM6IGFueTtcbiAgYXV0aCQgPSB0aGlzLnJvb3Qub25FdmVudCgnYXV0aCcpLnBpcGUoXG4gICAgdGFwKChhY2spID0+IHtcbiAgICAgIGlmICghYWNrLmVycikge1xuICAgICAgICB0aGlzLmlzID0gYWNrLnB1dDtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBzaGFyZVJlcGxheSgxKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5nWm9uZTogTmdab25lLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQFNraXBTZWxmKClcbiAgICBndW46IElHdW5DaGFpblJlZmVyZW5jZTxEYXRhVHlwZSwgUmVmZXJlbmNlS2V5LCBmYWxzZT4gJlxuICAgICAgUGFydGlhbDxHdW5DaGFpbkZ1bmN0aW9ucz4gJlxuICAgICAgUGFydGlhbDxHdW5DaGFpbk1ldGE+LFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHB1YmxpYyByb290OiBHdW5DaGFpblxuICApIHtcbiAgICBzdXBlcihuZ1pvbmUsIGd1biBhcyBhbnkpO1xuICAgIHRoaXMuaXMgPSAoZ3VuIGFzIGFueSkuaXM7XG4gIH1cblxuICBsb2dpbihhbGlhczogc3RyaW5nLCBwYXNzOiBzdHJpbmcpIHtcbiAgICBjb25zdCBhdXRoJCA9IHRoaXMucm9vdC5vbkV2ZW50KCdhdXRoJykucGlwZShcbiAgICAgIGZpbHRlcigoYWNrKSA9PiAhYWNrLmVyciksXG4gICAgICBmaWx0ZXIoKGFjaykgPT4ge1xuICAgICAgICByZXR1cm4gYWNrLnB1dC5hbGlhcyA9PT0gYWxpYXM7XG4gICAgICB9KSxcbiAgICAgIHRha2UoMSlcbiAgICApO1xuXG4gICAgY29uc3QgbG9naW4kID0gZnJvbUV2ZW50UGF0dGVybihcbiAgICAgIChoYW5kbGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbCA9IHsgc3RvcHBlZDogZmFsc2UgfTtcbiAgICAgICAgdGhpcy5ndW4uYXV0aChhbGlhcywgcGFzcywgKGFjazogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXIoYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzaWduYWw7XG4gICAgICB9LFxuICAgICAgKGhhbmRsZXIsIHNpZ25hbCkgPT4ge1xuICAgICAgICBzaWduYWwuc3RvcHBlZCA9IHRydWU7XG4gICAgICB9XG4gICAgKS5waXBlKFxuICAgICAgbWVyZ2VNYXAoKGFjazogYW55KSA9PiAoYWNrLndhaXQgPyB0aHJvd0Vycm9yKG5ldyBFcnJvcihhY2spKSA6IG9mKGFjaykpKSxcbiAgICAgIHJldHJ5V2hlbigoZXJyb3JzKSA9PiBlcnJvcnMucGlwZShkZWxheSgxMDAwKSwgdGFrZSgxMCkpKVxuICAgICk7XG4gICAgY29uc3QgbG9naW5PckF1dGgkID0gZnJvbShbYXV0aCQsIGxvZ2luJF0pLnBpcGUobWVyZ2VBbGwoKSwgdGFrZSgxKSk7XG4gICAgcmV0dXJuIGxvZ2luT3JBdXRoJDtcbiAgfVxuXG4gIGNyZWF0ZShhbGlhczogc3RyaW5nLCBwYXNzOiBzdHJpbmcpIHtcbiAgICBjb25zdCBhdXRoJCA9IHRoaXMucm9vdC5vbkV2ZW50KCdhdXRoJykucGlwZShcbiAgICAgIGZpbHRlcigoYWNrKSA9PiB7XG4gICAgICAgIHJldHVybiBhY2sucHV0LmFsaWFzID09PSBhbGlhcztcbiAgICAgIH0pLFxuICAgICAgdGFrZSgxKVxuICAgICk7XG4gICAgdGhpcy5ndW4uY3JlYXRlKGFsaWFzLCBwYXNzKTtcbiAgICByZXR1cm4gYXV0aCQ7XG4gIH1cblxuICBzZWNyZXQodmFsdWU6IGFueSkge1xuICAgIGlmICh0aGlzLmd1bi5zZWNyZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZyb20odGhpcy5ndW4uc2VjcmV0KHZhbHVlKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignR1VOLmNoYWluLnNlY3JldCBOT1QgRk9VTkQnKTtcbiAgfVxuXG4gIGZyb208VD4oZ3VuOiBJR3VuQ2hhaW5SZWZlcmVuY2U8VD4pIHtcbiAgICByZXR1cm4gbmV3IEd1bkF1dGhDaGFpbjxUPih0aGlzLm5nWm9uZSwgZ3VuLCB0aGlzLnJvb3QpO1xuICB9XG5cbiAgcmVjYWxsKCkge1xuICAgIHRoaXMuZ3VuLnJlY2FsbCh7IHNlc3Npb25TdG9yYWdlOiB0cnVlIH0pO1xuICAgIHJldHVybiB0aGlzLmF1dGgkLnBpcGUodGltZW91dCg1MDAwKSk7XG4gIH1cblxuICBsb2dvdXQoKSB7XG4gICAgdGhpcy5ndW4ubGVhdmUoKTtcbiAgfVxuICBwdXQoXG4gICAgZGF0YTogUGFydGlhbDxcbiAgICAgIEFsd2F5c0Rpc2FsbG93ZWRUeXBlPERpc2FsbG93UHJpbWl0aXZlczxJc1RvcCwgRGlzYWxsb3dBcnJheTxEYXRhVHlwZT4+PlxuICAgID4sXG4gICAgY2VydGlmaWNhdGU6IHN0cmluZyA9IHRoaXMuY2VydGlmaWNhdGVcbiAgKSB7XG4gICAgcmV0dXJuIHN1cGVyLnB1dChkYXRhLCBjZXJ0aWZpY2F0ZSk7XG4gIH1cbn1cblxuLyoqIFJlcHJlc2VudHMgYSBub2RlIG5lc3RlZCB1bmRlciBhIHVzZXIvcGFpclxuICogZ3VuLnVzZXIoKSA6IEF1dGhDaGFpblxuICogZ3VuLnVzZXIocHViKSA6IFVzZXJDaGFpblxuICogZ3VuLmdldCgnfkBhbGlhcycpIDogR3VuQ2hhaW48e3B1Yjogc3RyaW5nfT5cbiAqL1xuZXhwb3J0IGNsYXNzIEd1bkNlcnRDaGFpbiBleHRlbmRzIEd1bkNoYWluIHt9XG4iXX0=