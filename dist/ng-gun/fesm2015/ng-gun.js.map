{"version":3,"file":"ng-gun.js","sources":["../../../projects/ng-gun/src/lib/functions/gun-utils.ts","../../../projects/ng-gun/src/lib/classes/GunChain.ts","../../../projects/ng-gun/src/lib/ng-gun.service.ts","../../../projects/ng-gun/src/lib/ng-gun.component.ts","../../../projects/ng-gun/src/lib/alias.pipe.ts","../../../projects/ng-gun/src/lib/chain.directive.ts","../../../projects/ng-gun/src/lib/soul.pipe.ts","../../../projects/ng-gun/src/lib/updated.pipe.ts","../../../projects/ng-gun/src/lib/ng-sea.service.ts","../../../projects/ng-gun/src/lib/verify.pipe.ts","../../../projects/ng-gun/src/lib/route-chain.directive.ts","../../../projects/ng-gun/src/lib/ng-gun.module.ts","../../../projects/ng-gun/src/lib/gun-resolver.service.ts","../../../projects/ng-gun/src/public-api.ts","../../../projects/ng-gun/src/ng-gun.ts"],"sourcesContent":["import * as Gun from 'gun';\nimport { IGunChainReference } from 'gun/types/chain';\nimport { IGunCertificate } from '../classes/Certificate';\nexport const gunUpdateTime = (value: any) => {\n  const updates = Gun.node.is(value) ? (value as any)._['>'] : null;\n  if (!updates) {\n    return 0;\n  }\n  return Object.values(updates).reduce((latest: any, time: any) =>\n    time > latest ? time : latest\n  ) as number;\n};\nexport const gunChainArray = (value: IGunChainReference) => {\n  let c = value as any;\n  const path = [];\n  do {\n    if (c._.get) {\n      path.push(c);\n    } else {\n      break;\n    }\n    c = c.back();\n  } while (c.back() !== c);\n\n  while (c.back) {\n    const back = c.back();\n    if (back !== c && (c as any)._.get) {\n      const key = (c as any)._.get;\n      path.push(key);\n      c = c.back();\n    } else {\n      break;\n    }\n  }\n  return path;\n};\n\nexport const gunCertificateChain = (value: IGunChainReference) =>\n  gunChainArray(value).map((c) => c.get('certs'));\n\n/**\n * Returns an array of keys representing the path of the given chain\n * @param value the chain to pathify\n */\nexport const gunPath = (value: IGunChainReference) => {\n  let c = value as any;\n  const path = [];\n  while (c.back) {\n    const back = c.back();\n    if (back !== c && (c as any)._.get) {\n      const key = (c as any)._.get;\n      path.push(key);\n      c = c.back();\n    } else {\n      break;\n    }\n  }\n  return path;\n};\n\nexport function parseCertificate(cert: string) {\n  const RE_SEA_CERT = /^SEA/;\n  if (!RE_SEA_CERT.test(cert)) {\n    throw new Error('could not parse certificate, incorrect prefix');\n  }\n  const scrubbed = cert.replace(RE_SEA_CERT, '');\n  return JSON.parse(scrubbed) as IGunCertificate;\n}\n","import { Inject, Injectable, NgZone, Optional, SkipSelf } from '@angular/core';\nimport * as Gun from 'gun';\nimport { IGunChainReference } from 'gun/types/chain';\nimport {\n  AlwaysDisallowedType,\n  ArrayAsRecord,\n  ArrayOf,\n  DisallowArray,\n  DisallowPrimitives,\n} from 'gun/types/types';\nimport {\n  from,\n  fromEventPattern,\n  Observable,\n  of,\n  Subject,\n  throwError,\n} from 'rxjs';\nimport {\n  debounceTime,\n  delay,\n  filter,\n  map,\n  mergeAll,\n  mergeMap,\n  retryWhen,\n  scan,\n  shareReplay,\n  take,\n  tap,\n  timeout,\n} from 'rxjs/operators';\nimport { gunChainArray, gunPath } from '../functions/gun-utils';\nimport { GunRuntimeOpts } from '../GunRuntimeOpts';\nimport { ICertStore } from './ICertStore';\nimport { LexicalQuery } from './LexicalQuery';\nimport { SEA } from 'gun';\n\nexport const GUN_NODE = Symbol('GUN_NODE');\n\nexport interface GunChainCallbackOptions {\n  includeKeys?: boolean;\n  includeNulls?: boolean;\n  changes?: boolean;\n  bypassZone?: boolean;\n}\n\nexport interface GunChainFunctions {\n  secret: (value: any) => IGunChainReference;\n  grant: (value: any) => IGunChainReference;\n}\n\nexport interface GunChainMeta {\n  _: {\n    root: {\n      opt: GunRuntimeOpts;\n    };\n  } & any;\n}\n\n@Injectable()\nexport class GunChain<\n  DataType = Record<string, any>,\n  ReferenceKey = any,\n  IsTop extends 'pre_root' | 'root' | false = false\n> {\n  path!: string[];\n  isNested = false;\n  recordPub!: any;\n  record?: any;\n  certificate!: string;\n  certificate$ = new Subject<string>();\n\n  private _gun!: IGunChainReference<DataType, ReferenceKey, IsTop> &\n    GunChainFunctions &\n    GunChainMeta;\n  public get gun(): IGunChainReference<DataType, ReferenceKey, IsTop> &\n    GunChainFunctions &\n    GunChainMeta {\n    return this._gun;\n  }\n  public set gun(\n    value: IGunChainReference<DataType, ReferenceKey, IsTop> &\n      GunChainFunctions &\n      GunChainMeta\n  ) {\n    this._gun = value;\n    const myKey = (value as any)._.get;\n\n    const path = gunPath(value as any);\n    const chainArray = gunChainArray(value as any);\n    this.path = path;\n\n    const userPair = (this.gun.user() as any).is;\n    if (!userPair) {\n      // TODO figure out how to handle this case\n\n      return;\n    }\n    const userPub = `~${(this.gun.user() as any).is?.pub}`;\n    const pubs = path.filter((key) => key.startsWith('~'));\n    if (pubs.length > 0) {\n      this.recordPub = pubs[0];\n      const firstPub = path.findIndex((k) => k.startsWith('~'));\n      this.record = chainArray[firstPub];\n\n      if (this.recordPub.indexOf(userPub) < 0) {\n        this.isNested = true;\n        const pathFromRecord = [...path];\n        const recordPath = pathFromRecord.splice(firstPub).reverse();\n        pathFromRecord.reverse();\n\n        if (myKey === this.recordPub) {\n          // console.log('sub root', myKey);\n        } else {\n          // console.log('foreign key', myKey);\n          const keyInRecord = pathFromRecord[0];\n          const record = chainArray[firstPub];\n          // console.log('record', record);\n\n          this.record = record;\n          const recordCerts = record.get('certs');\n          const pathCerts = recordCerts.get(keyInRecord);\n          const searchKeys = [userPair.pub, '*'];\n          const myCert = pathCerts.get(userPair.pub);\n          myCert.not(() => {\n            // console.log('no cert found');\n            pathCerts.get('*').once((pubCert: any) => {\n              if (!pubCert) {\n                // console.warn('no public cert found either');\n              }\n              this.certificate = pubCert;\n              this.certificate$.next(pubCert);\n            });\n          });\n          // console.log('  %s', keyInRecord);\n          myCert.once(async (cert: any) => {\n            if (cert === null || cert === undefined) {\n              console.log('no user cert found, checking for public cert');\n              return;\n            }\n            // console.log('cert', cert);\n            // TODO verify cert later, the await causes chained put() calls to fail\n            // const verified = await SEA.verify(\n            //   cert,\n            //   this.recordPub.replace('~', '')\n            // );\n            this.certificate = cert;\n            this.certificate$.next(cert);\n            // console.log(\n            //   'verified cert for %s.%s',\n            //   this.recordPub,\n            //   keyInRecord,\n            //   pathFromRecord.join('.')\n            // );\n          });\n        }\n      }\n    }\n  }\n\n  public get canEdit(): boolean {\n    return this.certificate !== null && this.certificate !== undefined;\n  }\n\n  constructor(\n    protected ngZone: NgZone,\n    @Optional()\n    @Inject(GUN_NODE)\n    gun: IGunChainReference<DataType, ReferenceKey, IsTop> &\n      GunChainFunctions &\n      GunChainMeta\n  ) {\n    if (!gun) {\n      this.gun = new Gun() as any;\n    } else {\n      this.gun = gun;\n    }\n  }\n  certificates: ICertStore = {};\n  private sources = new Map<string, Observable<any>>();\n  private _auth: GunAuthChain<DataType, ReferenceKey> | null = null;\n\n  from<T>(gun: IGunChainReference<T>) {\n    return new GunChain<T>(this.ngZone, gun as any);\n  }\n\n  get<K extends keyof DataType>(\n    key: ArrayOf<DataType> extends never ? K : ArrayOf<DataType>\n  ) {\n    const soul: ArrayOf<DataType> extends never\n      ? K\n      : ArrayOf<DataType> = this.getSoul(key);\n    return this.from(this.gun.get(soul));\n  }\n\n  put(\n    data: Partial<\n      AlwaysDisallowedType<DisallowPrimitives<IsTop, DisallowArray<DataType>>>\n    >,\n    certificate: string = this.certificate\n  ) {\n    // FIXME \"unverified data\" - certified put values must be signed?\n\n    if (this.isNested && !certificate) {\n      console.warn('NO CERTIFICATE FOUND FOR FOREIGN RECORD!');\n    }\n    (this.gun.put as any)(\n      data,\n      (...putAck: any[]) => {\n        console.log('putAck', putAck);\n      },\n      certificate ? { opt: { cert: certificate } } : undefined\n    );\n    return this;\n  }\n\n  set(\n    data: AlwaysDisallowedType<\n      DataType extends Array<infer U>\n        ? U extends {\n            [key: string]: any;\n            [key: number]: any;\n          }\n          ? ArrayOf<DataType>\n          : never\n        : never\n    >,\n    certificate: string = this.certificate\n  ) {\n    if (this.isNested && !certificate) {\n      console.warn('NO CERTIFICATE FOUND FOR FOREIGN RECORD!');\n      this.record?.get('certs').load((certs: any) => {\n        console.log('all certs:', certs);\n      });\n    }\n    return this.from(\n      this.gun.set(\n        data,\n        null,\n        certificate\n          ? {\n              opt: {\n                cert: certificate,\n              },\n            }\n          : undefined\n      )\n    );\n  }\n\n  unset(data: ArrayOf<DataType>) {\n    if (this.gun.unset) {\n      return this.from(this.gun.unset(data));\n    } else {\n      throw new Error('CANNOT FIND Gun.chain.unset!');\n    }\n  }\n\n  query(query: LexicalQuery): GunChain<DataType, ReferenceKey, IsTop> {\n    return this.from(this.gun.get(query as any)) as any;\n  }\n\n  load() {\n    // return this.from((this.gun as any).load((d: any) => d) as any);\n    return fromEventPattern(\n      (handler) => {\n        const signal = { stopped: false };\n        (this.gun as any).load((data: any) => {\n          const converted = data;\n          this.ngZone.run(() => {\n            handler(converted);\n          });\n        });\n        return signal;\n      },\n      (handler, signal) => {\n        signal.stopped = true;\n      }\n    ).pipe(take(1));\n  }\n  open() {\n    // return this.from((this.gun as any).load((d: any) => d) as any);\n    return fromEventPattern(\n      (handler) => {\n        const signal = { stopped: false };\n        (this.gun as any).open((data: any) => {\n          const converted = data;\n          this.ngZone.run(() => {\n            handler(converted);\n          });\n        });\n        return signal;\n      },\n      (handler, signal) => {\n        signal.stopped = true;\n      }\n    ).pipe(debounceTime(25));\n  }\n\n  map(options?: GunChainCallbackOptions) {\n    return this.from(this.gun.map());\n  }\n\n  reduce(options?: GunChainCallbackOptions) {\n    const base = this.from(this.gun.map());\n\n    return base.on({ includeKeys: true }).pipe(\n      scan((acc: any, val: any) => {\n        if (val[0] === null || undefined === val[0]) {\n          delete acc[val[1]];\n        } else {\n          acc[val[1]] = val[0];\n        }\n        return acc;\n      }, {} as DataType[]),\n      map((v) =>\n        options?.includeNulls\n          ? v\n          : Object.values(v).filter((ov) => ov !== undefined)\n      ),\n      debounceTime(100)\n    );\n  }\n\n  not() {\n    return fromEventPattern((handler) => {\n      const signal = { stopped: false };\n      if (this.gun.not) {\n        this.gun.not((key: ReferenceKey) => {\n          handler(key);\n        });\n      }\n    });\n  }\n\n  on(\n    options?: GunChainCallbackOptions\n  ): Observable<AlwaysDisallowedType<ArrayAsRecord<DataType>>> {\n    return fromEventPattern(\n      (handler) => {\n        const signal = { stopped: false };\n        this.gun.on(\n          (\n            data: AlwaysDisallowedType<ArrayAsRecord<DataType>>,\n            key,\n            at?: any,\n            ev?: any\n          ) => {\n            if (signal.stopped) {\n              return ev.off();\n            }\n            const dispatchHandler = () => {\n              if (options?.includeKeys) {\n                handler(data, key);\n              } else {\n                handler(data);\n              }\n            };\n            // FIXME: ngZone.run() causes infinite recursion\n            if (options?.bypassZone) {\n              dispatchHandler();\n            } else {\n              this.ngZone.run(dispatchHandler);\n            }\n          },\n          options as any\n        );\n        return signal;\n      },\n      (handler, signal) => {\n        signal.stopped = true;\n      }\n    );\n  }\n\n  once() {\n    return fromEventPattern(\n      (handler) => {\n        const signal = { stopped: false };\n        this.gun.once(\n          (\n            data:\n              | AlwaysDisallowedType<ArrayAsRecord<DataType>>\n              | DisallowPrimitives<\n                  IsTop,\n                  AlwaysDisallowedType<ArrayAsRecord<DataType>>\n                >\n              | undefined,\n            key,\n            at?: any,\n            ev?: any\n          ) => {\n            if (ev && signal.stopped) {\n              return ev.off();\n            }\n            this.ngZone.run(() => {\n              handler(data);\n            });\n          }\n        );\n        return signal;\n      },\n      (handler, signal) => {\n        signal.stopped = true;\n      }\n    ).pipe(take(1));\n  }\n\n  auth() {\n    if (!this._auth) {\n      this._auth = new GunAuthChain<DataType, ReferenceKey>(\n        this.ngZone,\n        //// no fix for this... gun.user.is is static! can't have multiple logins on a single gun instance\n        // TODO allow option to create a new gun instance for this auth call\n        this.gun.user().recall({ sessionStorage: true }) as any,\n        this as any\n      );\n    }\n    return this._auth;\n  }\n\n  user(pubKey?: string) {\n    return this.from(this.gun.user(pubKey?.replace(/^~/, '')));\n  }\n\n  onEvent(event: string, node = this.gun): Observable<any> {\n    if (!this.sources.has(event)) {\n      const source = fromEventPattern((handler) => {\n        // console.log('add handler');\n        (node as any).on(event, (...args: any) => {\n          this.ngZone.run(() => {\n            handler(...args);\n          });\n        });\n      }).pipe(shareReplay(1));\n      this.sources.set(event, source);\n    }\n    return this.sources.get(event) as Observable<any>;\n  }\n\n  protected getSoul(key: any) {\n    return typeof key === 'object' && Gun.node.is(key)\n      ? (Gun.node.soul(key) as any)\n      : key;\n  }\n}\n\n/** Represents a top-level authenticated node (user or key pair) */\nexport class GunAuthChain<\n  DataType = Record<string, any>,\n  ReferenceKey = any,\n  IsTop = false\n> extends GunChain<DataType, ReferenceKey, false> {\n  private _is: any;\n  set is(value: any) {\n    this._is = value;\n\n    if (value) {\n      this.root\n        .get(`~${value.pub}`)\n        .get('alias')\n        .once()\n        .subscribe((alias: any) => {\n          this.alias = this.gun._.root.user?._?.put?.alias;\n        });\n    }\n  }\n  get is() {\n    return this._is;\n  }\n  alias!: string;\n  auth$ = this.root.onEvent('auth').pipe(\n    tap((ack) => {\n      if (!ack.err) {\n        this.is = ack.put;\n      }\n    }),\n    shareReplay(1)\n  );\n\n  constructor(\n    ngZone: NgZone,\n    @Optional()\n    @SkipSelf()\n    gun: IGunChainReference<DataType, ReferenceKey, false> &\n      Partial<GunChainFunctions> &\n      Partial<GunChainMeta>,\n    @Optional() @SkipSelf() public root: GunChain\n  ) {\n    super(ngZone, gun as any);\n    this.is = (gun as any).is;\n  }\n\n  login(alias: string, pass: string) {\n    const auth$ = this.root.onEvent('auth').pipe(\n      filter((ack) => !ack.err),\n      filter((ack) => {\n        return ack.put.alias === alias;\n      }),\n      take(1)\n    );\n\n    const login$ = fromEventPattern(\n      (handler) => {\n        const signal = { stopped: false };\n        this.gun.auth(alias, pass, (ack: any) => {\n          this.ngZone.run(() => {\n            handler(ack);\n          });\n        });\n        return signal;\n      },\n      (handler, signal) => {\n        signal.stopped = true;\n      }\n    ).pipe(\n      mergeMap((ack: any) => (ack.wait ? throwError(new Error(ack)) : of(ack))),\n      retryWhen((errors) => errors.pipe(delay(1000), take(10)))\n    );\n    const loginOrAuth$ = from([auth$, login$]).pipe(mergeAll(), take(1));\n    return loginOrAuth$;\n  }\n\n  create(alias: string, pass: string) {\n    const auth$ = this.root.onEvent('auth').pipe(\n      filter((ack) => {\n        return ack.put.alias === alias;\n      }),\n      take(1)\n    );\n    this.gun.create(alias, pass);\n    return auth$;\n  }\n\n  secret(value: any) {\n    if (this.gun.secret) {\n      return this.from(this.gun.secret(value));\n    }\n    throw new Error('GUN.chain.secret NOT FOUND');\n  }\n\n  from<T>(gun: IGunChainReference<T>) {\n    return new GunAuthChain<T>(this.ngZone, gun, this.root);\n  }\n\n  recall() {\n    this.gun.recall({ sessionStorage: true });\n    return this.auth$.pipe(timeout(5000));\n  }\n\n  logout() {\n    this.gun.leave();\n  }\n  put(\n    data: Partial<\n      AlwaysDisallowedType<DisallowPrimitives<IsTop, DisallowArray<DataType>>>\n    >,\n    certificate: string = this.certificate\n  ) {\n    // SEA.sign(data, this.is.alias);\n    super.put(data, certificate);\n    return this;\n  }\n}\n\n/** Represents a node nested under a user/pair\n * gun.user() : AuthChain\n * gun.user(pub) : UserChain\n * gun.get('~@alias') : GunChain<{pub: string}>\n */\nexport class GunCertChain extends GunChain {}\n","import { Inject, Injectable, NgZone } from '@angular/core';\n\nimport * as Gun from 'gun';\nimport { IGunChainReference } from 'gun/types/chain';\nimport { IGunConstructorOptions } from 'gun/types/options';\nimport { GunChain } from './classes/GunChain';\nimport { GunPeers } from './GunPeers';\nexport const GunOptions = 'gun-options';\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgGunService<\n  DataType = Record<string, any>,\n  ReferenceKey = any\n> extends GunChain<DataType, ReferenceKey, 'pre_root'> {\n  get peers(): GunPeers {\n    return this.gun._.root.opt.peers;\n  }\n\n  constructor(\n    @Inject(GunOptions)\n    public readonly gunOptions: IGunConstructorOptions,\n    ngZone: NgZone\n  ) {\n    super(ngZone, new Gun(JSON.parse(JSON.stringify(gunOptions))) as any);\n  }\n\n  findAlias(alias: string) {\n    return this.get(`~@${alias}` as any).once();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-gun',\n  template: `\n    <p>\n      ng-gun works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgGunComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { AsyncPipe } from '@angular/common';\nimport { ChangeDetectorRef, Pipe, PipeTransform } from '@angular/core';\nimport { NgGunService } from './ng-gun.service';\nimport { map, take, shareReplay } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Pipe({\n  name: 'alias',\n})\nexport class AliasPipe extends AsyncPipe implements PipeTransform {\n  constructor(private ngGun: NgGunService, _ref: ChangeDetectorRef) {\n    super(_ref);\n  }\n  transform(value: any, ...args: any[]): any {\n    if (value === '*') {\n      return of(value);\n    }\n    return this.ngGun\n      .get(`~${value.replace('~', '')}`)\n      .on()\n      .pipe(\n        map((v: any) => v.alias || value),\n        shareReplay(1)\n      );\n  }\n}\n","import { Directive, Input, EventEmitter } from '@angular/core';\nimport { GunChain } from './classes/GunChain';\nimport { NgGunService } from './ng-gun.service';\nimport { shareReplay } from 'rxjs/operators';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[gunChain]',\n  exportAs: 'gunChain',\n})\nexport class ChainDirective {\n  private _chain?: GunChain | undefined;\n  public get chain(): GunChain | undefined {\n    return this._chain;\n  }\n  @Input('gunChain')\n  public set chain(value: GunChain | undefined) {\n    if (value !== this._chain) {\n      this._chain = value;\n      this._chain$.emit(value);\n    }\n  }\n\n  private _chain$ = new EventEmitter<GunChain>();\n  chain$ = this._chain$.pipe(shareReplay(1));\n\n  constructor(private ngGun: NgGunService) {}\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as Gun from 'gun';\n\n@Pipe({\n  name: 'soul',\n})\nexport class SoulPipe implements PipeTransform {\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return Gun.node.is(value) ? Gun.node.soul(value) : undefined;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as Gun from 'gun';\n\n@Pipe({\n  name: 'updated',\n})\nexport class UpdatedPipe implements PipeTransform {\n  transform(value: any, ...args: unknown[]): unknown {\n    const updates = Gun.node.is(value) ? (value as any)._['>'] : null;\n    if (!updates) {\n      return null;\n    }\n    return Object.values(updates).reduce(\n      (latest: any, time: any) => (time > latest ? time : latest),\n      0\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as Gun from 'gun';\nimport { IGunStaticSEA } from 'gun/types/static/sea';\nimport { from } from 'rxjs';\nimport { Certificants, CertificatePolicy } from './classes/Certificate';\nimport { mergeAll, mergeMap } from 'rxjs/operators';\n\nexport interface CertificateOptions {\n  epiry?: number;\n  blacklist?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgSeaService {\n  SEA: IGunStaticSEA & {\n    certify: (\n      certificants: any,\n      policies: any,\n      authority: any,\n      cb?: any,\n      opt?: any\n    ) => Promise<any>;\n  } = Gun.SEA as any;\n  constructor() {}\n\n  certify(\n    certificants: Certificants,\n    policies: CertificatePolicy | CertificatePolicy[],\n    authority: any,\n    options?: CertificateOptions\n  ) {\n    return from(\n      this.SEA.certify(certificants, policies, authority, null, options)\n    );\n  }\n\n  certifySelf(pair: any) {\n    return from(this.SEA.certify(pair, '*', pair));\n  }\n\n  pair() {\n    return from(this.SEA.pair(() => {}));\n  }\n\n  async getCertStore(\n    certificant: any,\n    paths: string[],\n    auth: any,\n    isProtected = false,\n    opts: any = null\n  ) {\n    console.log('certifying', certificant);\n    if (Array.isArray(certificant)) {\n      const certificantsPromises: any = certificant.map(\n        async (c) => await this.getCertStore(c, paths, auth, isProtected, opts)\n      );\n      const certificants: any[] = await Promise.all(certificantsPromises);\n      console.log('certificants', certificants);\n      return certificants;\n    }\n    if (typeof certificant !== 'string') {\n      if (typeof certificant !== 'object') {\n        throw new Error('cannot certify provided certificant');\n      } else if (!certificant.pub) {\n        throw new Error('cannot certify provided certificant');\n      }\n    }\n    const store = {} as any;\n    const certPromises = paths.map(async (path: string) => {\n      const policy = { '*': path } as any;\n      if (isProtected) {\n        policy['+'] = '*';\n      }\n      const cert = await this.certify(\n        certificant,\n        policy,\n        auth,\n        opts\n      ).toPromise();\n      store[path] = {} as any;\n      store[path][certificant.pub || certificant] = cert;\n    });\n    await Promise.all(certPromises);\n    // console.log('certified', store);\n    return store;\n  }\n}\n","import { AsyncPipe } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  Optional,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { map, take, pluck, tap } from 'rxjs/operators';\nimport { NgSeaService } from './ng-sea.service';\nimport { ChainDirective } from './chain.directive';\nimport { SEA } from 'gun';\nimport { of, from } from 'rxjs';\nimport { NgGunService } from './ng-gun.service';\n\n@Pipe({\n  name: 'verify',\n})\nexport class VerifyPipe extends AsyncPipe implements PipeTransform {\n  constructor(\n    private ngGun: NgGunService,\n    private sea: NgSeaService,\n    private ref: ChangeDetectorRef,\n    @Optional()\n    private chain: ChainDirective\n  ) {\n    super(ref);\n  }\n  transform(value: any, ...args: any[]) {\n    if (!this.chain.chain) {\n      return null;\n    }\n    return from(\n      SEA.verify(value, this.chain.chain?.recordPub.replace('~', ''))\n    ).pipe(\n      // tap((v) => console.log('verified', v)),\n      tap((v) => this.ref.detectChanges())\n    ) as any;\n    // ) as any;\n  }\n}\n","import { Directive, Inject, Optional, Output } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { NgGunService } from './ng-gun.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as Gun from 'gun';\nimport { Observable } from 'rxjs';\n\n@Directive({\n  selector: '[libRouteGun]',\n})\nexport class RouteChainDirective<T = any> {\n  @Output()\n  chain$ = this.route.data.pipe(\n    map((data) => {\n      const d = data[this.dataKey];\n      const soul = Gun.node.soul(d);\n      // console.log('route data', this.dataKey);\n      return this.ngGun.auth().root.get(soul);\n    })\n  );\n  @Output()\n  data$: Observable<T> = this.chain$.pipe(\n    switchMap((chain) => chain.once() as Observable<T>)\n  );\n  constructor(\n    private route: ActivatedRoute,\n    protected ngGun: NgGunService,\n    @Optional()\n    @Inject('gun-route-data-key')\n    private dataKey: string = 'chain'\n  ) {\n    this.data$.subscribe((data) => console.log({ data }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AliasPipe } from './alias.pipe';\nimport { ChainDirective } from './chain.directive';\nimport { NgGunComponent } from './ng-gun.component';\nimport { SoulPipe } from './soul.pipe';\nimport { UpdatedPipe } from './updated.pipe';\nimport { VerifyPipe } from './verify.pipe';\nimport { RouteChainDirective } from './route-chain.directive';\n\n@NgModule({\n  declarations: [\n    NgGunComponent,\n    SoulPipe,\n    UpdatedPipe,\n    ChainDirective,\n    AliasPipe,\n    VerifyPipe,\n    RouteChainDirective,\n  ],\n  exports: [\n    NgGunComponent,\n    SoulPipe,\n    UpdatedPipe,\n    ChainDirective,\n    AliasPipe,\n    VerifyPipe,\n    RouteChainDirective,\n  ],\n  providers: [{ provide: 'gun-route-data-key', useValue: 'chain' }],\n})\nexport class NgGunModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { NgGunService } from './ng-gun.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GunResolverService<T> implements Resolve<T> {\n  constructor(private ngGun: NgGunService) {}\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<any> {\n    const soul = route.params.soul;\n    return this.ngGun.auth().root.get(soul).once();\n  }\n}\n","/*\n * Public API Surface of ng-gun\n */\n\nexport * from './lib/ng-gun.service';\nexport * from './lib/ng-gun.component';\nexport * from './lib/ng-gun.module';\nexport * from './lib/classes/GunChain';\nexport * from './lib/soul.pipe';\nexport * from './lib/updated.pipe';\nexport * from './lib/chain.directive';\nexport * from './lib/alias.pipe';\nexport * from './lib/verify.pipe';\nexport * from './lib/GunPeer';\nexport * from './lib/GunPeers';\nexport * from './lib/gun-resolver.service';\nexport * from './lib/route-chain.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}